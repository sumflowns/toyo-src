// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product_attribute_value.proto

package product_attribute_value

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductAttributeValueHandler service

type ProductAttributeValueHandlerService interface {
	//获取信息
	GetProductAttributeValueById(ctx context.Context, in *In_GetProductAttributeValueById, opts ...client.CallOption) (*Out_GetProductAttributeValueById, error)
	//修改信息
	UpdateProductAttributeValueInfo(ctx context.Context, in *In_UpdateProductAttributeValueInfo, opts ...client.CallOption) (*Out_UpdateProductAttributeValueInfo, error)
	//获取列表
	GetProductAttributeValues(ctx context.Context, in *In_GetProductAttributeValues, opts ...client.CallOption) (*Out_GetProductAttributeValues, error)
	//删除列表
	DeleteProductAttributeValues(ctx context.Context, in *In_DeleteProductAttributeValues, opts ...client.CallOption) (*Out_DeleteProductAttributeValues, error)
	//新建信息
	CreateProductAttributeValue(ctx context.Context, in *In_CreateProductAttributeValue, opts ...client.CallOption) (*Out_CreateProductAttributeValue, error)
}

type productAttributeValueHandlerService struct {
	c    client.Client
	name string
}

func NewProductAttributeValueHandlerService(name string, c client.Client) ProductAttributeValueHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "productattributevaluehandler"
	}
	return &productAttributeValueHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productAttributeValueHandlerService) GetProductAttributeValueById(ctx context.Context, in *In_GetProductAttributeValueById, opts ...client.CallOption) (*Out_GetProductAttributeValueById, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeValueHandler.GetProductAttributeValueById", in)
	out := new(Out_GetProductAttributeValueById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueHandlerService) UpdateProductAttributeValueInfo(ctx context.Context, in *In_UpdateProductAttributeValueInfo, opts ...client.CallOption) (*Out_UpdateProductAttributeValueInfo, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeValueHandler.UpdateProductAttributeValueInfo", in)
	out := new(Out_UpdateProductAttributeValueInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueHandlerService) GetProductAttributeValues(ctx context.Context, in *In_GetProductAttributeValues, opts ...client.CallOption) (*Out_GetProductAttributeValues, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeValueHandler.GetProductAttributeValues", in)
	out := new(Out_GetProductAttributeValues)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueHandlerService) DeleteProductAttributeValues(ctx context.Context, in *In_DeleteProductAttributeValues, opts ...client.CallOption) (*Out_DeleteProductAttributeValues, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeValueHandler.DeleteProductAttributeValues", in)
	out := new(Out_DeleteProductAttributeValues)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueHandlerService) CreateProductAttributeValue(ctx context.Context, in *In_CreateProductAttributeValue, opts ...client.CallOption) (*Out_CreateProductAttributeValue, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeValueHandler.CreateProductAttributeValue", in)
	out := new(Out_CreateProductAttributeValue)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductAttributeValueHandler service

type ProductAttributeValueHandlerHandler interface {
	//获取信息
	GetProductAttributeValueById(context.Context, *In_GetProductAttributeValueById, *Out_GetProductAttributeValueById) error
	//修改信息
	UpdateProductAttributeValueInfo(context.Context, *In_UpdateProductAttributeValueInfo, *Out_UpdateProductAttributeValueInfo) error
	//获取列表
	GetProductAttributeValues(context.Context, *In_GetProductAttributeValues, *Out_GetProductAttributeValues) error
	//删除列表
	DeleteProductAttributeValues(context.Context, *In_DeleteProductAttributeValues, *Out_DeleteProductAttributeValues) error
	//新建信息
	CreateProductAttributeValue(context.Context, *In_CreateProductAttributeValue, *Out_CreateProductAttributeValue) error
}

func RegisterProductAttributeValueHandlerHandler(s server.Server, hdlr ProductAttributeValueHandlerHandler, opts ...server.HandlerOption) error {
	type productAttributeValueHandler interface {
		GetProductAttributeValueById(ctx context.Context, in *In_GetProductAttributeValueById, out *Out_GetProductAttributeValueById) error
		UpdateProductAttributeValueInfo(ctx context.Context, in *In_UpdateProductAttributeValueInfo, out *Out_UpdateProductAttributeValueInfo) error
		GetProductAttributeValues(ctx context.Context, in *In_GetProductAttributeValues, out *Out_GetProductAttributeValues) error
		DeleteProductAttributeValues(ctx context.Context, in *In_DeleteProductAttributeValues, out *Out_DeleteProductAttributeValues) error
		CreateProductAttributeValue(ctx context.Context, in *In_CreateProductAttributeValue, out *Out_CreateProductAttributeValue) error
	}
	type ProductAttributeValueHandler struct {
		productAttributeValueHandler
	}
	h := &productAttributeValueHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductAttributeValueHandler{h}, opts...))
}

type productAttributeValueHandlerHandler struct {
	ProductAttributeValueHandlerHandler
}

func (h *productAttributeValueHandlerHandler) GetProductAttributeValueById(ctx context.Context, in *In_GetProductAttributeValueById, out *Out_GetProductAttributeValueById) error {
	return h.ProductAttributeValueHandlerHandler.GetProductAttributeValueById(ctx, in, out)
}

func (h *productAttributeValueHandlerHandler) UpdateProductAttributeValueInfo(ctx context.Context, in *In_UpdateProductAttributeValueInfo, out *Out_UpdateProductAttributeValueInfo) error {
	return h.ProductAttributeValueHandlerHandler.UpdateProductAttributeValueInfo(ctx, in, out)
}

func (h *productAttributeValueHandlerHandler) GetProductAttributeValues(ctx context.Context, in *In_GetProductAttributeValues, out *Out_GetProductAttributeValues) error {
	return h.ProductAttributeValueHandlerHandler.GetProductAttributeValues(ctx, in, out)
}

func (h *productAttributeValueHandlerHandler) DeleteProductAttributeValues(ctx context.Context, in *In_DeleteProductAttributeValues, out *Out_DeleteProductAttributeValues) error {
	return h.ProductAttributeValueHandlerHandler.DeleteProductAttributeValues(ctx, in, out)
}

func (h *productAttributeValueHandlerHandler) CreateProductAttributeValue(ctx context.Context, in *In_CreateProductAttributeValue, out *Out_CreateProductAttributeValue) error {
	return h.ProductAttributeValueHandlerHandler.CreateProductAttributeValue(ctx, in, out)
}
