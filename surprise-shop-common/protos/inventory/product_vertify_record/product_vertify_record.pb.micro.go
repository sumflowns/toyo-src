// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product_vertify_record.proto

package product_vertify_record

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductVertifyRecordHandler service

type ProductVertifyRecordHandlerService interface {
	//获取信息
	GetProductVertifyRecordById(ctx context.Context, in *In_GetProductVertifyRecordById, opts ...client.CallOption) (*Out_GetProductVertifyRecordById, error)
	//修改信息
	UpdateProductVertifyRecordInfo(ctx context.Context, in *In_UpdateProductVertifyRecordInfo, opts ...client.CallOption) (*Out_UpdateProductVertifyRecordInfo, error)
	//获取列表
	GetProductVertifyRecords(ctx context.Context, in *In_GetProductVertifyRecords, opts ...client.CallOption) (*Out_GetProductVertifyRecords, error)
	//删除列表
	DeleteProductVertifyRecords(ctx context.Context, in *In_DeleteProductVertifyRecords, opts ...client.CallOption) (*Out_DeleteProductVertifyRecords, error)
	//新建信息
	CreateProductVertifyRecord(ctx context.Context, in *In_CreateProductVertifyRecord, opts ...client.CallOption) (*Out_CreateProductVertifyRecord, error)
}

type productVertifyRecordHandlerService struct {
	c    client.Client
	name string
}

func NewProductVertifyRecordHandlerService(name string, c client.Client) ProductVertifyRecordHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "productvertifyrecordhandler"
	}
	return &productVertifyRecordHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productVertifyRecordHandlerService) GetProductVertifyRecordById(ctx context.Context, in *In_GetProductVertifyRecordById, opts ...client.CallOption) (*Out_GetProductVertifyRecordById, error) {
	req := c.c.NewRequest(c.name, "ProductVertifyRecordHandler.GetProductVertifyRecordById", in)
	out := new(Out_GetProductVertifyRecordById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordHandlerService) UpdateProductVertifyRecordInfo(ctx context.Context, in *In_UpdateProductVertifyRecordInfo, opts ...client.CallOption) (*Out_UpdateProductVertifyRecordInfo, error) {
	req := c.c.NewRequest(c.name, "ProductVertifyRecordHandler.UpdateProductVertifyRecordInfo", in)
	out := new(Out_UpdateProductVertifyRecordInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordHandlerService) GetProductVertifyRecords(ctx context.Context, in *In_GetProductVertifyRecords, opts ...client.CallOption) (*Out_GetProductVertifyRecords, error) {
	req := c.c.NewRequest(c.name, "ProductVertifyRecordHandler.GetProductVertifyRecords", in)
	out := new(Out_GetProductVertifyRecords)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordHandlerService) DeleteProductVertifyRecords(ctx context.Context, in *In_DeleteProductVertifyRecords, opts ...client.CallOption) (*Out_DeleteProductVertifyRecords, error) {
	req := c.c.NewRequest(c.name, "ProductVertifyRecordHandler.DeleteProductVertifyRecords", in)
	out := new(Out_DeleteProductVertifyRecords)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordHandlerService) CreateProductVertifyRecord(ctx context.Context, in *In_CreateProductVertifyRecord, opts ...client.CallOption) (*Out_CreateProductVertifyRecord, error) {
	req := c.c.NewRequest(c.name, "ProductVertifyRecordHandler.CreateProductVertifyRecord", in)
	out := new(Out_CreateProductVertifyRecord)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductVertifyRecordHandler service

type ProductVertifyRecordHandlerHandler interface {
	//获取信息
	GetProductVertifyRecordById(context.Context, *In_GetProductVertifyRecordById, *Out_GetProductVertifyRecordById) error
	//修改信息
	UpdateProductVertifyRecordInfo(context.Context, *In_UpdateProductVertifyRecordInfo, *Out_UpdateProductVertifyRecordInfo) error
	//获取列表
	GetProductVertifyRecords(context.Context, *In_GetProductVertifyRecords, *Out_GetProductVertifyRecords) error
	//删除列表
	DeleteProductVertifyRecords(context.Context, *In_DeleteProductVertifyRecords, *Out_DeleteProductVertifyRecords) error
	//新建信息
	CreateProductVertifyRecord(context.Context, *In_CreateProductVertifyRecord, *Out_CreateProductVertifyRecord) error
}

func RegisterProductVertifyRecordHandlerHandler(s server.Server, hdlr ProductVertifyRecordHandlerHandler, opts ...server.HandlerOption) error {
	type productVertifyRecordHandler interface {
		GetProductVertifyRecordById(ctx context.Context, in *In_GetProductVertifyRecordById, out *Out_GetProductVertifyRecordById) error
		UpdateProductVertifyRecordInfo(ctx context.Context, in *In_UpdateProductVertifyRecordInfo, out *Out_UpdateProductVertifyRecordInfo) error
		GetProductVertifyRecords(ctx context.Context, in *In_GetProductVertifyRecords, out *Out_GetProductVertifyRecords) error
		DeleteProductVertifyRecords(ctx context.Context, in *In_DeleteProductVertifyRecords, out *Out_DeleteProductVertifyRecords) error
		CreateProductVertifyRecord(ctx context.Context, in *In_CreateProductVertifyRecord, out *Out_CreateProductVertifyRecord) error
	}
	type ProductVertifyRecordHandler struct {
		productVertifyRecordHandler
	}
	h := &productVertifyRecordHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductVertifyRecordHandler{h}, opts...))
}

type productVertifyRecordHandlerHandler struct {
	ProductVertifyRecordHandlerHandler
}

func (h *productVertifyRecordHandlerHandler) GetProductVertifyRecordById(ctx context.Context, in *In_GetProductVertifyRecordById, out *Out_GetProductVertifyRecordById) error {
	return h.ProductVertifyRecordHandlerHandler.GetProductVertifyRecordById(ctx, in, out)
}

func (h *productVertifyRecordHandlerHandler) UpdateProductVertifyRecordInfo(ctx context.Context, in *In_UpdateProductVertifyRecordInfo, out *Out_UpdateProductVertifyRecordInfo) error {
	return h.ProductVertifyRecordHandlerHandler.UpdateProductVertifyRecordInfo(ctx, in, out)
}

func (h *productVertifyRecordHandlerHandler) GetProductVertifyRecords(ctx context.Context, in *In_GetProductVertifyRecords, out *Out_GetProductVertifyRecords) error {
	return h.ProductVertifyRecordHandlerHandler.GetProductVertifyRecords(ctx, in, out)
}

func (h *productVertifyRecordHandlerHandler) DeleteProductVertifyRecords(ctx context.Context, in *In_DeleteProductVertifyRecords, out *Out_DeleteProductVertifyRecords) error {
	return h.ProductVertifyRecordHandlerHandler.DeleteProductVertifyRecords(ctx, in, out)
}

func (h *productVertifyRecordHandlerHandler) CreateProductVertifyRecord(ctx context.Context, in *In_CreateProductVertifyRecord, out *Out_CreateProductVertifyRecord) error {
	return h.ProductVertifyRecordHandlerHandler.CreateProductVertifyRecord(ctx, in, out)
}
