// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product_category.proto

package product_category

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductCategoryHandler service

type ProductCategoryHandlerService interface {
	//获取信息
	GetProductCategoryById(ctx context.Context, in *In_GetProductCategoryById, opts ...client.CallOption) (*Out_GetProductCategoryById, error)
	//修改信息
	UpdateProductCategoryInfo(ctx context.Context, in *In_UpdateProductCategoryInfo, opts ...client.CallOption) (*Out_UpdateProductCategoryInfo, error)
	//获取列表
	GetProductCategorys(ctx context.Context, in *In_GetProductCategorys, opts ...client.CallOption) (*Out_GetProductCategorys, error)
	//删除列表
	DeleteProductCategorys(ctx context.Context, in *In_DeleteProductCategorys, opts ...client.CallOption) (*Out_DeleteProductCategorys, error)
	//新建信息
	CreateProductCategory(ctx context.Context, in *In_CreateProductCategory, opts ...client.CallOption) (*Out_CreateProductCategory, error)
	//获取类别详情
	GetProductCategoryDetailsList(ctx context.Context, in *In_GetProductCategoryDetailsList, opts ...client.CallOption) (*Out_GetProductCategoryDetailsList, error)
}

type productCategoryHandlerService struct {
	c    client.Client
	name string
}

func NewProductCategoryHandlerService(name string, c client.Client) ProductCategoryHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "product_category"
	}
	return &productCategoryHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productCategoryHandlerService) GetProductCategoryById(ctx context.Context, in *In_GetProductCategoryById, opts ...client.CallOption) (*Out_GetProductCategoryById, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.GetProductCategoryById", in)
	out := new(Out_GetProductCategoryById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) UpdateProductCategoryInfo(ctx context.Context, in *In_UpdateProductCategoryInfo, opts ...client.CallOption) (*Out_UpdateProductCategoryInfo, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.UpdateProductCategoryInfo", in)
	out := new(Out_UpdateProductCategoryInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) GetProductCategorys(ctx context.Context, in *In_GetProductCategorys, opts ...client.CallOption) (*Out_GetProductCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.GetProductCategorys", in)
	out := new(Out_GetProductCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) DeleteProductCategorys(ctx context.Context, in *In_DeleteProductCategorys, opts ...client.CallOption) (*Out_DeleteProductCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.DeleteProductCategorys", in)
	out := new(Out_DeleteProductCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) CreateProductCategory(ctx context.Context, in *In_CreateProductCategory, opts ...client.CallOption) (*Out_CreateProductCategory, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.CreateProductCategory", in)
	out := new(Out_CreateProductCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) GetProductCategoryDetailsList(ctx context.Context, in *In_GetProductCategoryDetailsList, opts ...client.CallOption) (*Out_GetProductCategoryDetailsList, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.GetProductCategoryDetailsList", in)
	out := new(Out_GetProductCategoryDetailsList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductCategoryHandler service

type ProductCategoryHandlerHandler interface {
	//获取信息
	GetProductCategoryById(context.Context, *In_GetProductCategoryById, *Out_GetProductCategoryById) error
	//修改信息
	UpdateProductCategoryInfo(context.Context, *In_UpdateProductCategoryInfo, *Out_UpdateProductCategoryInfo) error
	//获取列表
	GetProductCategorys(context.Context, *In_GetProductCategorys, *Out_GetProductCategorys) error
	//删除列表
	DeleteProductCategorys(context.Context, *In_DeleteProductCategorys, *Out_DeleteProductCategorys) error
	//新建信息
	CreateProductCategory(context.Context, *In_CreateProductCategory, *Out_CreateProductCategory) error
	//获取类别详情
	GetProductCategoryDetailsList(context.Context, *In_GetProductCategoryDetailsList, *Out_GetProductCategoryDetailsList) error
}

func RegisterProductCategoryHandlerHandler(s server.Server, hdlr ProductCategoryHandlerHandler, opts ...server.HandlerOption) error {
	type productCategoryHandler interface {
		GetProductCategoryById(ctx context.Context, in *In_GetProductCategoryById, out *Out_GetProductCategoryById) error
		UpdateProductCategoryInfo(ctx context.Context, in *In_UpdateProductCategoryInfo, out *Out_UpdateProductCategoryInfo) error
		GetProductCategorys(ctx context.Context, in *In_GetProductCategorys, out *Out_GetProductCategorys) error
		DeleteProductCategorys(ctx context.Context, in *In_DeleteProductCategorys, out *Out_DeleteProductCategorys) error
		CreateProductCategory(ctx context.Context, in *In_CreateProductCategory, out *Out_CreateProductCategory) error
		GetProductCategoryDetailsList(ctx context.Context, in *In_GetProductCategoryDetailsList, out *Out_GetProductCategoryDetailsList) error
	}
	type ProductCategoryHandler struct {
		productCategoryHandler
	}
	h := &productCategoryHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductCategoryHandler{h}, opts...))
}

type productCategoryHandlerHandler struct {
	ProductCategoryHandlerHandler
}

func (h *productCategoryHandlerHandler) GetProductCategoryById(ctx context.Context, in *In_GetProductCategoryById, out *Out_GetProductCategoryById) error {
	return h.ProductCategoryHandlerHandler.GetProductCategoryById(ctx, in, out)
}

func (h *productCategoryHandlerHandler) UpdateProductCategoryInfo(ctx context.Context, in *In_UpdateProductCategoryInfo, out *Out_UpdateProductCategoryInfo) error {
	return h.ProductCategoryHandlerHandler.UpdateProductCategoryInfo(ctx, in, out)
}

func (h *productCategoryHandlerHandler) GetProductCategorys(ctx context.Context, in *In_GetProductCategorys, out *Out_GetProductCategorys) error {
	return h.ProductCategoryHandlerHandler.GetProductCategorys(ctx, in, out)
}

func (h *productCategoryHandlerHandler) DeleteProductCategorys(ctx context.Context, in *In_DeleteProductCategorys, out *Out_DeleteProductCategorys) error {
	return h.ProductCategoryHandlerHandler.DeleteProductCategorys(ctx, in, out)
}

func (h *productCategoryHandlerHandler) CreateProductCategory(ctx context.Context, in *In_CreateProductCategory, out *Out_CreateProductCategory) error {
	return h.ProductCategoryHandlerHandler.CreateProductCategory(ctx, in, out)
}

func (h *productCategoryHandlerHandler) GetProductCategoryDetailsList(ctx context.Context, in *In_GetProductCategoryDetailsList, out *Out_GetProductCategoryDetailsList) error {
	return h.ProductCategoryHandlerHandler.GetProductCategoryDetailsList(ctx, in, out)
}
