// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product_sku_stock.proto

package product_sku_stock

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductSkuStockHandler service

type ProductSkuStockHandlerService interface {
	//获取信息
	GetProductSkuStockById(ctx context.Context, in *In_GetProductSkuStockById, opts ...client.CallOption) (*Out_GetProductSkuStockById, error)
	//修改信息
	UpdateProductSkuStockInfo(ctx context.Context, in *In_UpdateProductSkuStockInfo, opts ...client.CallOption) (*Out_UpdateProductSkuStockInfo, error)
	//获取列表
	GetProductSkuStocks(ctx context.Context, in *In_GetProductSkuStocks, opts ...client.CallOption) (*Out_GetProductSkuStocks, error)
	//删除列表
	DeleteProductSkuStocks(ctx context.Context, in *In_DeleteProductSkuStocks, opts ...client.CallOption) (*Out_DeleteProductSkuStocks, error)
	//新建信息
	CreateProductSkuStock(ctx context.Context, in *In_CreateProductSkuStock, opts ...client.CallOption) (*Out_CreateProductSkuStock, error)
	GetSellSkuStock(ctx context.Context, in *In_GetSellSkuStock, opts ...client.CallOption) (*Out_GetSellSkuStock, error)
}

type productSkuStockHandlerService struct {
	c    client.Client
	name string
}

func NewProductSkuStockHandlerService(name string, c client.Client) ProductSkuStockHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "product_sku_stock"
	}
	return &productSkuStockHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productSkuStockHandlerService) GetProductSkuStockById(ctx context.Context, in *In_GetProductSkuStockById, opts ...client.CallOption) (*Out_GetProductSkuStockById, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.GetProductSkuStockById", in)
	out := new(Out_GetProductSkuStockById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) UpdateProductSkuStockInfo(ctx context.Context, in *In_UpdateProductSkuStockInfo, opts ...client.CallOption) (*Out_UpdateProductSkuStockInfo, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.UpdateProductSkuStockInfo", in)
	out := new(Out_UpdateProductSkuStockInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) GetProductSkuStocks(ctx context.Context, in *In_GetProductSkuStocks, opts ...client.CallOption) (*Out_GetProductSkuStocks, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.GetProductSkuStocks", in)
	out := new(Out_GetProductSkuStocks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) DeleteProductSkuStocks(ctx context.Context, in *In_DeleteProductSkuStocks, opts ...client.CallOption) (*Out_DeleteProductSkuStocks, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.DeleteProductSkuStocks", in)
	out := new(Out_DeleteProductSkuStocks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) CreateProductSkuStock(ctx context.Context, in *In_CreateProductSkuStock, opts ...client.CallOption) (*Out_CreateProductSkuStock, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.CreateProductSkuStock", in)
	out := new(Out_CreateProductSkuStock)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) GetSellSkuStock(ctx context.Context, in *In_GetSellSkuStock, opts ...client.CallOption) (*Out_GetSellSkuStock, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.GetSellSkuStock", in)
	out := new(Out_GetSellSkuStock)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductSkuStockHandler service

type ProductSkuStockHandlerHandler interface {
	//获取信息
	GetProductSkuStockById(context.Context, *In_GetProductSkuStockById, *Out_GetProductSkuStockById) error
	//修改信息
	UpdateProductSkuStockInfo(context.Context, *In_UpdateProductSkuStockInfo, *Out_UpdateProductSkuStockInfo) error
	//获取列表
	GetProductSkuStocks(context.Context, *In_GetProductSkuStocks, *Out_GetProductSkuStocks) error
	//删除列表
	DeleteProductSkuStocks(context.Context, *In_DeleteProductSkuStocks, *Out_DeleteProductSkuStocks) error
	//新建信息
	CreateProductSkuStock(context.Context, *In_CreateProductSkuStock, *Out_CreateProductSkuStock) error
	GetSellSkuStock(context.Context, *In_GetSellSkuStock, *Out_GetSellSkuStock) error
}

func RegisterProductSkuStockHandlerHandler(s server.Server, hdlr ProductSkuStockHandlerHandler, opts ...server.HandlerOption) error {
	type productSkuStockHandler interface {
		GetProductSkuStockById(ctx context.Context, in *In_GetProductSkuStockById, out *Out_GetProductSkuStockById) error
		UpdateProductSkuStockInfo(ctx context.Context, in *In_UpdateProductSkuStockInfo, out *Out_UpdateProductSkuStockInfo) error
		GetProductSkuStocks(ctx context.Context, in *In_GetProductSkuStocks, out *Out_GetProductSkuStocks) error
		DeleteProductSkuStocks(ctx context.Context, in *In_DeleteProductSkuStocks, out *Out_DeleteProductSkuStocks) error
		CreateProductSkuStock(ctx context.Context, in *In_CreateProductSkuStock, out *Out_CreateProductSkuStock) error
		GetSellSkuStock(ctx context.Context, in *In_GetSellSkuStock, out *Out_GetSellSkuStock) error
	}
	type ProductSkuStockHandler struct {
		productSkuStockHandler
	}
	h := &productSkuStockHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductSkuStockHandler{h}, opts...))
}

type productSkuStockHandlerHandler struct {
	ProductSkuStockHandlerHandler
}

func (h *productSkuStockHandlerHandler) GetProductSkuStockById(ctx context.Context, in *In_GetProductSkuStockById, out *Out_GetProductSkuStockById) error {
	return h.ProductSkuStockHandlerHandler.GetProductSkuStockById(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) UpdateProductSkuStockInfo(ctx context.Context, in *In_UpdateProductSkuStockInfo, out *Out_UpdateProductSkuStockInfo) error {
	return h.ProductSkuStockHandlerHandler.UpdateProductSkuStockInfo(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) GetProductSkuStocks(ctx context.Context, in *In_GetProductSkuStocks, out *Out_GetProductSkuStocks) error {
	return h.ProductSkuStockHandlerHandler.GetProductSkuStocks(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) DeleteProductSkuStocks(ctx context.Context, in *In_DeleteProductSkuStocks, out *Out_DeleteProductSkuStocks) error {
	return h.ProductSkuStockHandlerHandler.DeleteProductSkuStocks(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) CreateProductSkuStock(ctx context.Context, in *In_CreateProductSkuStock, out *Out_CreateProductSkuStock) error {
	return h.ProductSkuStockHandlerHandler.CreateProductSkuStock(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) GetSellSkuStock(ctx context.Context, in *In_GetSellSkuStock, out *Out_GetSellSkuStock) error {
	return h.ProductSkuStockHandlerHandler.GetSellSkuStock(ctx, in, out)
}
