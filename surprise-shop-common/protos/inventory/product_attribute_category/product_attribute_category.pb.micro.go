// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product_attribute_category.proto

package product_attribute_category

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductAttributeCategoryHandler service

type ProductAttributeCategoryHandlerService interface {
	//获取信息
	GetProductAttributeCategoryById(ctx context.Context, in *In_GetProductAttributeCategoryById, opts ...client.CallOption) (*Out_GetProductAttributeCategoryById, error)
	//修改信息
	UpdateProductAttributeCategoryInfo(ctx context.Context, in *In_UpdateProductAttributeCategoryInfo, opts ...client.CallOption) (*Out_UpdateProductAttributeCategoryInfo, error)
	//获取列表
	GetProductAttributeCategorys(ctx context.Context, in *In_GetProductAttributeCategorys, opts ...client.CallOption) (*Out_GetProductAttributeCategorys, error)
	//删除列表
	DeleteProductAttributeCategorys(ctx context.Context, in *In_DeleteProductAttributeCategorys, opts ...client.CallOption) (*Out_DeleteProductAttributeCategorys, error)
	//新建信息
	CreateProductAttributeCategory(ctx context.Context, in *In_CreateProductAttributeCategory, opts ...client.CallOption) (*Out_CreateProductAttributeCategory, error)
}

type productAttributeCategoryHandlerService struct {
	c    client.Client
	name string
}

func NewProductAttributeCategoryHandlerService(name string, c client.Client) ProductAttributeCategoryHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "product_attribute_category"
	}
	return &productAttributeCategoryHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productAttributeCategoryHandlerService) GetProductAttributeCategoryById(ctx context.Context, in *In_GetProductAttributeCategoryById, opts ...client.CallOption) (*Out_GetProductAttributeCategoryById, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.GetProductAttributeCategoryById", in)
	out := new(Out_GetProductAttributeCategoryById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) UpdateProductAttributeCategoryInfo(ctx context.Context, in *In_UpdateProductAttributeCategoryInfo, opts ...client.CallOption) (*Out_UpdateProductAttributeCategoryInfo, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.UpdateProductAttributeCategoryInfo", in)
	out := new(Out_UpdateProductAttributeCategoryInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) GetProductAttributeCategorys(ctx context.Context, in *In_GetProductAttributeCategorys, opts ...client.CallOption) (*Out_GetProductAttributeCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.GetProductAttributeCategorys", in)
	out := new(Out_GetProductAttributeCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) DeleteProductAttributeCategorys(ctx context.Context, in *In_DeleteProductAttributeCategorys, opts ...client.CallOption) (*Out_DeleteProductAttributeCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.DeleteProductAttributeCategorys", in)
	out := new(Out_DeleteProductAttributeCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) CreateProductAttributeCategory(ctx context.Context, in *In_CreateProductAttributeCategory, opts ...client.CallOption) (*Out_CreateProductAttributeCategory, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.CreateProductAttributeCategory", in)
	out := new(Out_CreateProductAttributeCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductAttributeCategoryHandler service

type ProductAttributeCategoryHandlerHandler interface {
	//获取信息
	GetProductAttributeCategoryById(context.Context, *In_GetProductAttributeCategoryById, *Out_GetProductAttributeCategoryById) error
	//修改信息
	UpdateProductAttributeCategoryInfo(context.Context, *In_UpdateProductAttributeCategoryInfo, *Out_UpdateProductAttributeCategoryInfo) error
	//获取列表
	GetProductAttributeCategorys(context.Context, *In_GetProductAttributeCategorys, *Out_GetProductAttributeCategorys) error
	//删除列表
	DeleteProductAttributeCategorys(context.Context, *In_DeleteProductAttributeCategorys, *Out_DeleteProductAttributeCategorys) error
	//新建信息
	CreateProductAttributeCategory(context.Context, *In_CreateProductAttributeCategory, *Out_CreateProductAttributeCategory) error
}

func RegisterProductAttributeCategoryHandlerHandler(s server.Server, hdlr ProductAttributeCategoryHandlerHandler, opts ...server.HandlerOption) error {
	type productAttributeCategoryHandler interface {
		GetProductAttributeCategoryById(ctx context.Context, in *In_GetProductAttributeCategoryById, out *Out_GetProductAttributeCategoryById) error
		UpdateProductAttributeCategoryInfo(ctx context.Context, in *In_UpdateProductAttributeCategoryInfo, out *Out_UpdateProductAttributeCategoryInfo) error
		GetProductAttributeCategorys(ctx context.Context, in *In_GetProductAttributeCategorys, out *Out_GetProductAttributeCategorys) error
		DeleteProductAttributeCategorys(ctx context.Context, in *In_DeleteProductAttributeCategorys, out *Out_DeleteProductAttributeCategorys) error
		CreateProductAttributeCategory(ctx context.Context, in *In_CreateProductAttributeCategory, out *Out_CreateProductAttributeCategory) error
	}
	type ProductAttributeCategoryHandler struct {
		productAttributeCategoryHandler
	}
	h := &productAttributeCategoryHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductAttributeCategoryHandler{h}, opts...))
}

type productAttributeCategoryHandlerHandler struct {
	ProductAttributeCategoryHandlerHandler
}

func (h *productAttributeCategoryHandlerHandler) GetProductAttributeCategoryById(ctx context.Context, in *In_GetProductAttributeCategoryById, out *Out_GetProductAttributeCategoryById) error {
	return h.ProductAttributeCategoryHandlerHandler.GetProductAttributeCategoryById(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) UpdateProductAttributeCategoryInfo(ctx context.Context, in *In_UpdateProductAttributeCategoryInfo, out *Out_UpdateProductAttributeCategoryInfo) error {
	return h.ProductAttributeCategoryHandlerHandler.UpdateProductAttributeCategoryInfo(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) GetProductAttributeCategorys(ctx context.Context, in *In_GetProductAttributeCategorys, out *Out_GetProductAttributeCategorys) error {
	return h.ProductAttributeCategoryHandlerHandler.GetProductAttributeCategorys(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) DeleteProductAttributeCategorys(ctx context.Context, in *In_DeleteProductAttributeCategorys, out *Out_DeleteProductAttributeCategorys) error {
	return h.ProductAttributeCategoryHandlerHandler.DeleteProductAttributeCategorys(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) CreateProductAttributeCategory(ctx context.Context, in *In_CreateProductAttributeCategory, out *Out_CreateProductAttributeCategory) error {
	return h.ProductAttributeCategoryHandlerHandler.CreateProductAttributeCategory(ctx, in, out)
}
