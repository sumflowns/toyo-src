// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: inventory.proto

package inventory

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for InventoryHandler service

type InventoryHandlerService interface {
	//销售，锁定一个商品库存
	Sell(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//确认一个商品
	Confirm(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type inventoryHandlerService struct {
	c    client.Client
	name string
}

func NewInventoryHandlerService(name string, c client.Client) InventoryHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "inventory"
	}
	return &inventoryHandlerService{
		c:    c,
		name: name,
	}
}

func (c *inventoryHandlerService) Sell(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "InventoryHandler.Sell", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryHandlerService) Confirm(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "InventoryHandler.Confirm", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InventoryHandler service

type InventoryHandlerHandler interface {
	//销售，锁定一个商品库存
	Sell(context.Context, *Request, *Response) error
	//确认一个商品
	Confirm(context.Context, *Request, *Response) error
}

func RegisterInventoryHandlerHandler(s server.Server, hdlr InventoryHandlerHandler, opts ...server.HandlerOption) error {
	type inventoryHandler interface {
		Sell(ctx context.Context, in *Request, out *Response) error
		Confirm(ctx context.Context, in *Request, out *Response) error
	}
	type InventoryHandler struct {
		inventoryHandler
	}
	h := &inventoryHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&InventoryHandler{h}, opts...))
}

type inventoryHandlerHandler struct {
	InventoryHandlerHandler
}

func (h *inventoryHandlerHandler) Sell(ctx context.Context, in *Request, out *Response) error {
	return h.InventoryHandlerHandler.Sell(ctx, in, out)
}

func (h *inventoryHandlerHandler) Confirm(ctx context.Context, in *Request, out *Response) error {
	return h.InventoryHandlerHandler.Confirm(ctx, in, out)
}
