// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: brand.proto

package brand

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BrandHandler service

type BrandHandlerService interface {
	//获取信息
	GetBrandById(ctx context.Context, in *In_GetBrandById, opts ...client.CallOption) (*Out_GetBrandById, error)
	//修改信息
	UpdateBrandInfo(ctx context.Context, in *In_UpdateBrandInfo, opts ...client.CallOption) (*Out_UpdateBrandInfo, error)
	//获取列表
	GetBrands(ctx context.Context, in *In_GetBrands, opts ...client.CallOption) (*Out_GetBrands, error)
	//删除列表
	DeleteBrands(ctx context.Context, in *In_DeleteBrands, opts ...client.CallOption) (*Out_DeleteBrands, error)
	//新建信息
	CreateBrand(ctx context.Context, in *In_CreateBrand, opts ...client.CallOption) (*Out_CreateBrand, error)
}

type brandHandlerService struct {
	c    client.Client
	name string
}

func NewBrandHandlerService(name string, c client.Client) BrandHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "brand"
	}
	return &brandHandlerService{
		c:    c,
		name: name,
	}
}

func (c *brandHandlerService) GetBrandById(ctx context.Context, in *In_GetBrandById, opts ...client.CallOption) (*Out_GetBrandById, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.GetBrandById", in)
	out := new(Out_GetBrandById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) UpdateBrandInfo(ctx context.Context, in *In_UpdateBrandInfo, opts ...client.CallOption) (*Out_UpdateBrandInfo, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.UpdateBrandInfo", in)
	out := new(Out_UpdateBrandInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) GetBrands(ctx context.Context, in *In_GetBrands, opts ...client.CallOption) (*Out_GetBrands, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.GetBrands", in)
	out := new(Out_GetBrands)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) DeleteBrands(ctx context.Context, in *In_DeleteBrands, opts ...client.CallOption) (*Out_DeleteBrands, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.DeleteBrands", in)
	out := new(Out_DeleteBrands)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) CreateBrand(ctx context.Context, in *In_CreateBrand, opts ...client.CallOption) (*Out_CreateBrand, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.CreateBrand", in)
	out := new(Out_CreateBrand)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrandHandler service

type BrandHandlerHandler interface {
	//获取信息
	GetBrandById(context.Context, *In_GetBrandById, *Out_GetBrandById) error
	//修改信息
	UpdateBrandInfo(context.Context, *In_UpdateBrandInfo, *Out_UpdateBrandInfo) error
	//获取列表
	GetBrands(context.Context, *In_GetBrands, *Out_GetBrands) error
	//删除列表
	DeleteBrands(context.Context, *In_DeleteBrands, *Out_DeleteBrands) error
	//新建信息
	CreateBrand(context.Context, *In_CreateBrand, *Out_CreateBrand) error
}

func RegisterBrandHandlerHandler(s server.Server, hdlr BrandHandlerHandler, opts ...server.HandlerOption) error {
	type brandHandler interface {
		GetBrandById(ctx context.Context, in *In_GetBrandById, out *Out_GetBrandById) error
		UpdateBrandInfo(ctx context.Context, in *In_UpdateBrandInfo, out *Out_UpdateBrandInfo) error
		GetBrands(ctx context.Context, in *In_GetBrands, out *Out_GetBrands) error
		DeleteBrands(ctx context.Context, in *In_DeleteBrands, out *Out_DeleteBrands) error
		CreateBrand(ctx context.Context, in *In_CreateBrand, out *Out_CreateBrand) error
	}
	type BrandHandler struct {
		brandHandler
	}
	h := &brandHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&BrandHandler{h}, opts...))
}

type brandHandlerHandler struct {
	BrandHandlerHandler
}

func (h *brandHandlerHandler) GetBrandById(ctx context.Context, in *In_GetBrandById, out *Out_GetBrandById) error {
	return h.BrandHandlerHandler.GetBrandById(ctx, in, out)
}

func (h *brandHandlerHandler) UpdateBrandInfo(ctx context.Context, in *In_UpdateBrandInfo, out *Out_UpdateBrandInfo) error {
	return h.BrandHandlerHandler.UpdateBrandInfo(ctx, in, out)
}

func (h *brandHandlerHandler) GetBrands(ctx context.Context, in *In_GetBrands, out *Out_GetBrands) error {
	return h.BrandHandlerHandler.GetBrands(ctx, in, out)
}

func (h *brandHandlerHandler) DeleteBrands(ctx context.Context, in *In_DeleteBrands, out *Out_DeleteBrands) error {
	return h.BrandHandlerHandler.DeleteBrands(ctx, in, out)
}

func (h *brandHandlerHandler) CreateBrand(ctx context.Context, in *In_CreateBrand, out *Out_CreateBrand) error {
	return h.BrandHandlerHandler.CreateBrand(ctx, in, out)
}
