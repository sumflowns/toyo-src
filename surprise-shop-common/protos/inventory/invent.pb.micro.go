// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: invent.proto

package com_surprise_shop_srv_invent

import (
	brand "brand"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	inventory "inventory"
	math "math"
	product "product"
	product_attribute "product_attribute"
	product_attribute_category "product_attribute_category"
	product_category "product_category"
	product_sku_stock "product_sku_stock"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductHandler service

type ProductHandlerService interface {
	//获取信息
	GetProductById(ctx context.Context, in *product.In_GetProductById, opts ...client.CallOption) (*product.Out_GetProductById, error)
	//修改信息
	UpdateProductInfo(ctx context.Context, in *product.In_UpdateProductInfo, opts ...client.CallOption) (*product.Out_UpdateProductInfo, error)
	//获取列表
	GetProducts(ctx context.Context, in *product.In_GetProducts, opts ...client.CallOption) (*product.Out_GetProducts, error)
	//删除列表
	DeleteProducts(ctx context.Context, in *product.In_DeleteProducts, opts ...client.CallOption) (*product.Out_DeleteProducts, error)
	//新建信息
	CreateProduct(ctx context.Context, in *product.In_CreateProduct, opts ...client.CallOption) (*product.Out_CreateProduct, error)
}

type productHandlerService struct {
	c    client.Client
	name string
}

func NewProductHandlerService(name string, c client.Client) ProductHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.invent"
	}
	return &productHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productHandlerService) GetProductById(ctx context.Context, in *product.In_GetProductById, opts ...client.CallOption) (*product.Out_GetProductById, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.GetProductById", in)
	out := new(product.Out_GetProductById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) UpdateProductInfo(ctx context.Context, in *product.In_UpdateProductInfo, opts ...client.CallOption) (*product.Out_UpdateProductInfo, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.UpdateProductInfo", in)
	out := new(product.Out_UpdateProductInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) GetProducts(ctx context.Context, in *product.In_GetProducts, opts ...client.CallOption) (*product.Out_GetProducts, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.GetProducts", in)
	out := new(product.Out_GetProducts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) DeleteProducts(ctx context.Context, in *product.In_DeleteProducts, opts ...client.CallOption) (*product.Out_DeleteProducts, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.DeleteProducts", in)
	out := new(product.Out_DeleteProducts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) CreateProduct(ctx context.Context, in *product.In_CreateProduct, opts ...client.CallOption) (*product.Out_CreateProduct, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.CreateProduct", in)
	out := new(product.Out_CreateProduct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductHandler service

type ProductHandlerHandler interface {
	//获取信息
	GetProductById(context.Context, *product.In_GetProductById, *product.Out_GetProductById) error
	//修改信息
	UpdateProductInfo(context.Context, *product.In_UpdateProductInfo, *product.Out_UpdateProductInfo) error
	//获取列表
	GetProducts(context.Context, *product.In_GetProducts, *product.Out_GetProducts) error
	//删除列表
	DeleteProducts(context.Context, *product.In_DeleteProducts, *product.Out_DeleteProducts) error
	//新建信息
	CreateProduct(context.Context, *product.In_CreateProduct, *product.Out_CreateProduct) error
}

func RegisterProductHandlerHandler(s server.Server, hdlr ProductHandlerHandler, opts ...server.HandlerOption) error {
	type productHandler interface {
		GetProductById(ctx context.Context, in *product.In_GetProductById, out *product.Out_GetProductById) error
		UpdateProductInfo(ctx context.Context, in *product.In_UpdateProductInfo, out *product.Out_UpdateProductInfo) error
		GetProducts(ctx context.Context, in *product.In_GetProducts, out *product.Out_GetProducts) error
		DeleteProducts(ctx context.Context, in *product.In_DeleteProducts, out *product.Out_DeleteProducts) error
		CreateProduct(ctx context.Context, in *product.In_CreateProduct, out *product.Out_CreateProduct) error
	}
	type ProductHandler struct {
		productHandler
	}
	h := &productHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductHandler{h}, opts...))
}

type productHandlerHandler struct {
	ProductHandlerHandler
}

func (h *productHandlerHandler) GetProductById(ctx context.Context, in *product.In_GetProductById, out *product.Out_GetProductById) error {
	return h.ProductHandlerHandler.GetProductById(ctx, in, out)
}

func (h *productHandlerHandler) UpdateProductInfo(ctx context.Context, in *product.In_UpdateProductInfo, out *product.Out_UpdateProductInfo) error {
	return h.ProductHandlerHandler.UpdateProductInfo(ctx, in, out)
}

func (h *productHandlerHandler) GetProducts(ctx context.Context, in *product.In_GetProducts, out *product.Out_GetProducts) error {
	return h.ProductHandlerHandler.GetProducts(ctx, in, out)
}

func (h *productHandlerHandler) DeleteProducts(ctx context.Context, in *product.In_DeleteProducts, out *product.Out_DeleteProducts) error {
	return h.ProductHandlerHandler.DeleteProducts(ctx, in, out)
}

func (h *productHandlerHandler) CreateProduct(ctx context.Context, in *product.In_CreateProduct, out *product.Out_CreateProduct) error {
	return h.ProductHandlerHandler.CreateProduct(ctx, in, out)
}

// Client API for InventoryHandler service

type InventoryHandlerService interface {
	//销售，锁定一个商品库存
	Sell(ctx context.Context, in *inventory.Request, opts ...client.CallOption) (*inventory.Response, error)
	//确认一个商品
	Confirm(ctx context.Context, in *inventory.Request, opts ...client.CallOption) (*inventory.Response, error)
}

type inventoryHandlerService struct {
	c    client.Client
	name string
}

func NewInventoryHandlerService(name string, c client.Client) InventoryHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.invent"
	}
	return &inventoryHandlerService{
		c:    c,
		name: name,
	}
}

func (c *inventoryHandlerService) Sell(ctx context.Context, in *inventory.Request, opts ...client.CallOption) (*inventory.Response, error) {
	req := c.c.NewRequest(c.name, "InventoryHandler.Sell", in)
	out := new(inventory.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryHandlerService) Confirm(ctx context.Context, in *inventory.Request, opts ...client.CallOption) (*inventory.Response, error) {
	req := c.c.NewRequest(c.name, "InventoryHandler.Confirm", in)
	out := new(inventory.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InventoryHandler service

type InventoryHandlerHandler interface {
	//销售，锁定一个商品库存
	Sell(context.Context, *inventory.Request, *inventory.Response) error
	//确认一个商品
	Confirm(context.Context, *inventory.Request, *inventory.Response) error
}

func RegisterInventoryHandlerHandler(s server.Server, hdlr InventoryHandlerHandler, opts ...server.HandlerOption) error {
	type inventoryHandler interface {
		Sell(ctx context.Context, in *inventory.Request, out *inventory.Response) error
		Confirm(ctx context.Context, in *inventory.Request, out *inventory.Response) error
	}
	type InventoryHandler struct {
		inventoryHandler
	}
	h := &inventoryHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&InventoryHandler{h}, opts...))
}

type inventoryHandlerHandler struct {
	InventoryHandlerHandler
}

func (h *inventoryHandlerHandler) Sell(ctx context.Context, in *inventory.Request, out *inventory.Response) error {
	return h.InventoryHandlerHandler.Sell(ctx, in, out)
}

func (h *inventoryHandlerHandler) Confirm(ctx context.Context, in *inventory.Request, out *inventory.Response) error {
	return h.InventoryHandlerHandler.Confirm(ctx, in, out)
}

// Client API for BrandHandler service

type BrandHandlerService interface {
	//获取信息
	GetBrandById(ctx context.Context, in *brand.In_GetBrandById, opts ...client.CallOption) (*brand.Out_GetBrandById, error)
	//修改信息
	UpdateBrandInfo(ctx context.Context, in *brand.In_UpdateBrandInfo, opts ...client.CallOption) (*brand.Out_UpdateBrandInfo, error)
	//获取列表
	GetBrands(ctx context.Context, in *brand.In_GetBrands, opts ...client.CallOption) (*brand.Out_GetBrands, error)
	//删除列表
	DeleteBrands(ctx context.Context, in *brand.In_DeleteBrands, opts ...client.CallOption) (*brand.Out_DeleteBrands, error)
	//新建信息
	CreateBrand(ctx context.Context, in *brand.In_CreateBrand, opts ...client.CallOption) (*brand.Out_CreateBrand, error)
}

type brandHandlerService struct {
	c    client.Client
	name string
}

func NewBrandHandlerService(name string, c client.Client) BrandHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.invent"
	}
	return &brandHandlerService{
		c:    c,
		name: name,
	}
}

func (c *brandHandlerService) GetBrandById(ctx context.Context, in *brand.In_GetBrandById, opts ...client.CallOption) (*brand.Out_GetBrandById, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.GetBrandById", in)
	out := new(brand.Out_GetBrandById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) UpdateBrandInfo(ctx context.Context, in *brand.In_UpdateBrandInfo, opts ...client.CallOption) (*brand.Out_UpdateBrandInfo, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.UpdateBrandInfo", in)
	out := new(brand.Out_UpdateBrandInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) GetBrands(ctx context.Context, in *brand.In_GetBrands, opts ...client.CallOption) (*brand.Out_GetBrands, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.GetBrands", in)
	out := new(brand.Out_GetBrands)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) DeleteBrands(ctx context.Context, in *brand.In_DeleteBrands, opts ...client.CallOption) (*brand.Out_DeleteBrands, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.DeleteBrands", in)
	out := new(brand.Out_DeleteBrands)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandHandlerService) CreateBrand(ctx context.Context, in *brand.In_CreateBrand, opts ...client.CallOption) (*brand.Out_CreateBrand, error) {
	req := c.c.NewRequest(c.name, "BrandHandler.CreateBrand", in)
	out := new(brand.Out_CreateBrand)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrandHandler service

type BrandHandlerHandler interface {
	//获取信息
	GetBrandById(context.Context, *brand.In_GetBrandById, *brand.Out_GetBrandById) error
	//修改信息
	UpdateBrandInfo(context.Context, *brand.In_UpdateBrandInfo, *brand.Out_UpdateBrandInfo) error
	//获取列表
	GetBrands(context.Context, *brand.In_GetBrands, *brand.Out_GetBrands) error
	//删除列表
	DeleteBrands(context.Context, *brand.In_DeleteBrands, *brand.Out_DeleteBrands) error
	//新建信息
	CreateBrand(context.Context, *brand.In_CreateBrand, *brand.Out_CreateBrand) error
}

func RegisterBrandHandlerHandler(s server.Server, hdlr BrandHandlerHandler, opts ...server.HandlerOption) error {
	type brandHandler interface {
		GetBrandById(ctx context.Context, in *brand.In_GetBrandById, out *brand.Out_GetBrandById) error
		UpdateBrandInfo(ctx context.Context, in *brand.In_UpdateBrandInfo, out *brand.Out_UpdateBrandInfo) error
		GetBrands(ctx context.Context, in *brand.In_GetBrands, out *brand.Out_GetBrands) error
		DeleteBrands(ctx context.Context, in *brand.In_DeleteBrands, out *brand.Out_DeleteBrands) error
		CreateBrand(ctx context.Context, in *brand.In_CreateBrand, out *brand.Out_CreateBrand) error
	}
	type BrandHandler struct {
		brandHandler
	}
	h := &brandHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&BrandHandler{h}, opts...))
}

type brandHandlerHandler struct {
	BrandHandlerHandler
}

func (h *brandHandlerHandler) GetBrandById(ctx context.Context, in *brand.In_GetBrandById, out *brand.Out_GetBrandById) error {
	return h.BrandHandlerHandler.GetBrandById(ctx, in, out)
}

func (h *brandHandlerHandler) UpdateBrandInfo(ctx context.Context, in *brand.In_UpdateBrandInfo, out *brand.Out_UpdateBrandInfo) error {
	return h.BrandHandlerHandler.UpdateBrandInfo(ctx, in, out)
}

func (h *brandHandlerHandler) GetBrands(ctx context.Context, in *brand.In_GetBrands, out *brand.Out_GetBrands) error {
	return h.BrandHandlerHandler.GetBrands(ctx, in, out)
}

func (h *brandHandlerHandler) DeleteBrands(ctx context.Context, in *brand.In_DeleteBrands, out *brand.Out_DeleteBrands) error {
	return h.BrandHandlerHandler.DeleteBrands(ctx, in, out)
}

func (h *brandHandlerHandler) CreateBrand(ctx context.Context, in *brand.In_CreateBrand, out *brand.Out_CreateBrand) error {
	return h.BrandHandlerHandler.CreateBrand(ctx, in, out)
}

// Client API for ProductCategoryHandler service

type ProductCategoryHandlerService interface {
	//获取信息
	GetProductCategoryById(ctx context.Context, in *product_category.In_GetProductCategoryById, opts ...client.CallOption) (*product_category.Out_GetProductCategoryById, error)
	//修改信息
	UpdateProductCategoryInfo(ctx context.Context, in *product_category.In_UpdateProductCategoryInfo, opts ...client.CallOption) (*product_category.Out_UpdateProductCategoryInfo, error)
	//获取列表
	GetProductCategorys(ctx context.Context, in *product_category.In_GetProductCategorys, opts ...client.CallOption) (*product_category.Out_GetProductCategorys, error)
	//删除列表
	DeleteProductCategorys(ctx context.Context, in *product_category.In_DeleteProductCategorys, opts ...client.CallOption) (*product_category.Out_DeleteProductCategorys, error)
	//新建信息
	CreateProductCategory(ctx context.Context, in *product_category.In_CreateProductCategory, opts ...client.CallOption) (*product_category.Out_CreateProductCategory, error)
	//获取类别详情
	GetProductCategoryDetailsList(ctx context.Context, in *product_category.In_GetProductCategoryDetailsList, opts ...client.CallOption) (*product_category.Out_GetProductCategoryDetailsList, error)
}

type productCategoryHandlerService struct {
	c    client.Client
	name string
}

func NewProductCategoryHandlerService(name string, c client.Client) ProductCategoryHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.invent"
	}
	return &productCategoryHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productCategoryHandlerService) GetProductCategoryById(ctx context.Context, in *product_category.In_GetProductCategoryById, opts ...client.CallOption) (*product_category.Out_GetProductCategoryById, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.GetProductCategoryById", in)
	out := new(product_category.Out_GetProductCategoryById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) UpdateProductCategoryInfo(ctx context.Context, in *product_category.In_UpdateProductCategoryInfo, opts ...client.CallOption) (*product_category.Out_UpdateProductCategoryInfo, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.UpdateProductCategoryInfo", in)
	out := new(product_category.Out_UpdateProductCategoryInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) GetProductCategorys(ctx context.Context, in *product_category.In_GetProductCategorys, opts ...client.CallOption) (*product_category.Out_GetProductCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.GetProductCategorys", in)
	out := new(product_category.Out_GetProductCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) DeleteProductCategorys(ctx context.Context, in *product_category.In_DeleteProductCategorys, opts ...client.CallOption) (*product_category.Out_DeleteProductCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.DeleteProductCategorys", in)
	out := new(product_category.Out_DeleteProductCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) CreateProductCategory(ctx context.Context, in *product_category.In_CreateProductCategory, opts ...client.CallOption) (*product_category.Out_CreateProductCategory, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.CreateProductCategory", in)
	out := new(product_category.Out_CreateProductCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryHandlerService) GetProductCategoryDetailsList(ctx context.Context, in *product_category.In_GetProductCategoryDetailsList, opts ...client.CallOption) (*product_category.Out_GetProductCategoryDetailsList, error) {
	req := c.c.NewRequest(c.name, "ProductCategoryHandler.GetProductCategoryDetailsList", in)
	out := new(product_category.Out_GetProductCategoryDetailsList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductCategoryHandler service

type ProductCategoryHandlerHandler interface {
	//获取信息
	GetProductCategoryById(context.Context, *product_category.In_GetProductCategoryById, *product_category.Out_GetProductCategoryById) error
	//修改信息
	UpdateProductCategoryInfo(context.Context, *product_category.In_UpdateProductCategoryInfo, *product_category.Out_UpdateProductCategoryInfo) error
	//获取列表
	GetProductCategorys(context.Context, *product_category.In_GetProductCategorys, *product_category.Out_GetProductCategorys) error
	//删除列表
	DeleteProductCategorys(context.Context, *product_category.In_DeleteProductCategorys, *product_category.Out_DeleteProductCategorys) error
	//新建信息
	CreateProductCategory(context.Context, *product_category.In_CreateProductCategory, *product_category.Out_CreateProductCategory) error
	//获取类别详情
	GetProductCategoryDetailsList(context.Context, *product_category.In_GetProductCategoryDetailsList, *product_category.Out_GetProductCategoryDetailsList) error
}

func RegisterProductCategoryHandlerHandler(s server.Server, hdlr ProductCategoryHandlerHandler, opts ...server.HandlerOption) error {
	type productCategoryHandler interface {
		GetProductCategoryById(ctx context.Context, in *product_category.In_GetProductCategoryById, out *product_category.Out_GetProductCategoryById) error
		UpdateProductCategoryInfo(ctx context.Context, in *product_category.In_UpdateProductCategoryInfo, out *product_category.Out_UpdateProductCategoryInfo) error
		GetProductCategorys(ctx context.Context, in *product_category.In_GetProductCategorys, out *product_category.Out_GetProductCategorys) error
		DeleteProductCategorys(ctx context.Context, in *product_category.In_DeleteProductCategorys, out *product_category.Out_DeleteProductCategorys) error
		CreateProductCategory(ctx context.Context, in *product_category.In_CreateProductCategory, out *product_category.Out_CreateProductCategory) error
		GetProductCategoryDetailsList(ctx context.Context, in *product_category.In_GetProductCategoryDetailsList, out *product_category.Out_GetProductCategoryDetailsList) error
	}
	type ProductCategoryHandler struct {
		productCategoryHandler
	}
	h := &productCategoryHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductCategoryHandler{h}, opts...))
}

type productCategoryHandlerHandler struct {
	ProductCategoryHandlerHandler
}

func (h *productCategoryHandlerHandler) GetProductCategoryById(ctx context.Context, in *product_category.In_GetProductCategoryById, out *product_category.Out_GetProductCategoryById) error {
	return h.ProductCategoryHandlerHandler.GetProductCategoryById(ctx, in, out)
}

func (h *productCategoryHandlerHandler) UpdateProductCategoryInfo(ctx context.Context, in *product_category.In_UpdateProductCategoryInfo, out *product_category.Out_UpdateProductCategoryInfo) error {
	return h.ProductCategoryHandlerHandler.UpdateProductCategoryInfo(ctx, in, out)
}

func (h *productCategoryHandlerHandler) GetProductCategorys(ctx context.Context, in *product_category.In_GetProductCategorys, out *product_category.Out_GetProductCategorys) error {
	return h.ProductCategoryHandlerHandler.GetProductCategorys(ctx, in, out)
}

func (h *productCategoryHandlerHandler) DeleteProductCategorys(ctx context.Context, in *product_category.In_DeleteProductCategorys, out *product_category.Out_DeleteProductCategorys) error {
	return h.ProductCategoryHandlerHandler.DeleteProductCategorys(ctx, in, out)
}

func (h *productCategoryHandlerHandler) CreateProductCategory(ctx context.Context, in *product_category.In_CreateProductCategory, out *product_category.Out_CreateProductCategory) error {
	return h.ProductCategoryHandlerHandler.CreateProductCategory(ctx, in, out)
}

func (h *productCategoryHandlerHandler) GetProductCategoryDetailsList(ctx context.Context, in *product_category.In_GetProductCategoryDetailsList, out *product_category.Out_GetProductCategoryDetailsList) error {
	return h.ProductCategoryHandlerHandler.GetProductCategoryDetailsList(ctx, in, out)
}

// Client API for ProductAttributeCategoryHandler service

type ProductAttributeCategoryHandlerService interface {
	//获取信息
	GetProductAttributeCategoryById(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategoryById, opts ...client.CallOption) (*product_attribute_category.Out_GetProductAttributeCategoryById, error)
	//修改信息
	UpdateProductAttributeCategoryInfo(ctx context.Context, in *product_attribute_category.In_UpdateProductAttributeCategoryInfo, opts ...client.CallOption) (*product_attribute_category.Out_UpdateProductAttributeCategoryInfo, error)
	//获取列表
	GetProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategorys, opts ...client.CallOption) (*product_attribute_category.Out_GetProductAttributeCategorys, error)
	//删除列表
	DeleteProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_DeleteProductAttributeCategorys, opts ...client.CallOption) (*product_attribute_category.Out_DeleteProductAttributeCategorys, error)
	//新建信息
	CreateProductAttributeCategory(ctx context.Context, in *product_attribute_category.In_CreateProductAttributeCategory, opts ...client.CallOption) (*product_attribute_category.Out_CreateProductAttributeCategory, error)
}

type productAttributeCategoryHandlerService struct {
	c    client.Client
	name string
}

func NewProductAttributeCategoryHandlerService(name string, c client.Client) ProductAttributeCategoryHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.invent"
	}
	return &productAttributeCategoryHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productAttributeCategoryHandlerService) GetProductAttributeCategoryById(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategoryById, opts ...client.CallOption) (*product_attribute_category.Out_GetProductAttributeCategoryById, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.GetProductAttributeCategoryById", in)
	out := new(product_attribute_category.Out_GetProductAttributeCategoryById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) UpdateProductAttributeCategoryInfo(ctx context.Context, in *product_attribute_category.In_UpdateProductAttributeCategoryInfo, opts ...client.CallOption) (*product_attribute_category.Out_UpdateProductAttributeCategoryInfo, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.UpdateProductAttributeCategoryInfo", in)
	out := new(product_attribute_category.Out_UpdateProductAttributeCategoryInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) GetProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategorys, opts ...client.CallOption) (*product_attribute_category.Out_GetProductAttributeCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.GetProductAttributeCategorys", in)
	out := new(product_attribute_category.Out_GetProductAttributeCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) DeleteProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_DeleteProductAttributeCategorys, opts ...client.CallOption) (*product_attribute_category.Out_DeleteProductAttributeCategorys, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.DeleteProductAttributeCategorys", in)
	out := new(product_attribute_category.Out_DeleteProductAttributeCategorys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryHandlerService) CreateProductAttributeCategory(ctx context.Context, in *product_attribute_category.In_CreateProductAttributeCategory, opts ...client.CallOption) (*product_attribute_category.Out_CreateProductAttributeCategory, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeCategoryHandler.CreateProductAttributeCategory", in)
	out := new(product_attribute_category.Out_CreateProductAttributeCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductAttributeCategoryHandler service

type ProductAttributeCategoryHandlerHandler interface {
	//获取信息
	GetProductAttributeCategoryById(context.Context, *product_attribute_category.In_GetProductAttributeCategoryById, *product_attribute_category.Out_GetProductAttributeCategoryById) error
	//修改信息
	UpdateProductAttributeCategoryInfo(context.Context, *product_attribute_category.In_UpdateProductAttributeCategoryInfo, *product_attribute_category.Out_UpdateProductAttributeCategoryInfo) error
	//获取列表
	GetProductAttributeCategorys(context.Context, *product_attribute_category.In_GetProductAttributeCategorys, *product_attribute_category.Out_GetProductAttributeCategorys) error
	//删除列表
	DeleteProductAttributeCategorys(context.Context, *product_attribute_category.In_DeleteProductAttributeCategorys, *product_attribute_category.Out_DeleteProductAttributeCategorys) error
	//新建信息
	CreateProductAttributeCategory(context.Context, *product_attribute_category.In_CreateProductAttributeCategory, *product_attribute_category.Out_CreateProductAttributeCategory) error
}

func RegisterProductAttributeCategoryHandlerHandler(s server.Server, hdlr ProductAttributeCategoryHandlerHandler, opts ...server.HandlerOption) error {
	type productAttributeCategoryHandler interface {
		GetProductAttributeCategoryById(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategoryById, out *product_attribute_category.Out_GetProductAttributeCategoryById) error
		UpdateProductAttributeCategoryInfo(ctx context.Context, in *product_attribute_category.In_UpdateProductAttributeCategoryInfo, out *product_attribute_category.Out_UpdateProductAttributeCategoryInfo) error
		GetProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategorys, out *product_attribute_category.Out_GetProductAttributeCategorys) error
		DeleteProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_DeleteProductAttributeCategorys, out *product_attribute_category.Out_DeleteProductAttributeCategorys) error
		CreateProductAttributeCategory(ctx context.Context, in *product_attribute_category.In_CreateProductAttributeCategory, out *product_attribute_category.Out_CreateProductAttributeCategory) error
	}
	type ProductAttributeCategoryHandler struct {
		productAttributeCategoryHandler
	}
	h := &productAttributeCategoryHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductAttributeCategoryHandler{h}, opts...))
}

type productAttributeCategoryHandlerHandler struct {
	ProductAttributeCategoryHandlerHandler
}

func (h *productAttributeCategoryHandlerHandler) GetProductAttributeCategoryById(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategoryById, out *product_attribute_category.Out_GetProductAttributeCategoryById) error {
	return h.ProductAttributeCategoryHandlerHandler.GetProductAttributeCategoryById(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) UpdateProductAttributeCategoryInfo(ctx context.Context, in *product_attribute_category.In_UpdateProductAttributeCategoryInfo, out *product_attribute_category.Out_UpdateProductAttributeCategoryInfo) error {
	return h.ProductAttributeCategoryHandlerHandler.UpdateProductAttributeCategoryInfo(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) GetProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_GetProductAttributeCategorys, out *product_attribute_category.Out_GetProductAttributeCategorys) error {
	return h.ProductAttributeCategoryHandlerHandler.GetProductAttributeCategorys(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) DeleteProductAttributeCategorys(ctx context.Context, in *product_attribute_category.In_DeleteProductAttributeCategorys, out *product_attribute_category.Out_DeleteProductAttributeCategorys) error {
	return h.ProductAttributeCategoryHandlerHandler.DeleteProductAttributeCategorys(ctx, in, out)
}

func (h *productAttributeCategoryHandlerHandler) CreateProductAttributeCategory(ctx context.Context, in *product_attribute_category.In_CreateProductAttributeCategory, out *product_attribute_category.Out_CreateProductAttributeCategory) error {
	return h.ProductAttributeCategoryHandlerHandler.CreateProductAttributeCategory(ctx, in, out)
}

// Client API for ProductAttributeHandler service

type ProductAttributeHandlerService interface {
	//获取信息
	GetProductAttributeById(ctx context.Context, in *product_attribute.In_GetProductAttributeById, opts ...client.CallOption) (*product_attribute.Out_GetProductAttributeById, error)
	//修改信息
	UpdateProductAttributeInfo(ctx context.Context, in *product_attribute.In_UpdateProductAttributeInfo, opts ...client.CallOption) (*product_attribute.Out_UpdateProductAttributeInfo, error)
	//获取列表
	GetProductAttributes(ctx context.Context, in *product_attribute.In_GetProductAttributes, opts ...client.CallOption) (*product_attribute.Out_GetProductAttributes, error)
	//删除列表
	DeleteProductAttributes(ctx context.Context, in *product_attribute.In_DeleteProductAttributes, opts ...client.CallOption) (*product_attribute.Out_DeleteProductAttributes, error)
	//新建信息
	CreateProductAttribute(ctx context.Context, in *product_attribute.In_CreateProductAttribute, opts ...client.CallOption) (*product_attribute.Out_CreateProductAttribute, error)
	GetProductAttributeList(ctx context.Context, in *product_attribute.In_GetProductAttributeList, opts ...client.CallOption) (*product_attribute.Out_GetProductAttributeList, error)
}

type productAttributeHandlerService struct {
	c    client.Client
	name string
}

func NewProductAttributeHandlerService(name string, c client.Client) ProductAttributeHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.invent"
	}
	return &productAttributeHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productAttributeHandlerService) GetProductAttributeById(ctx context.Context, in *product_attribute.In_GetProductAttributeById, opts ...client.CallOption) (*product_attribute.Out_GetProductAttributeById, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeHandler.GetProductAttributeById", in)
	out := new(product_attribute.Out_GetProductAttributeById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeHandlerService) UpdateProductAttributeInfo(ctx context.Context, in *product_attribute.In_UpdateProductAttributeInfo, opts ...client.CallOption) (*product_attribute.Out_UpdateProductAttributeInfo, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeHandler.UpdateProductAttributeInfo", in)
	out := new(product_attribute.Out_UpdateProductAttributeInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeHandlerService) GetProductAttributes(ctx context.Context, in *product_attribute.In_GetProductAttributes, opts ...client.CallOption) (*product_attribute.Out_GetProductAttributes, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeHandler.GetProductAttributes", in)
	out := new(product_attribute.Out_GetProductAttributes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeHandlerService) DeleteProductAttributes(ctx context.Context, in *product_attribute.In_DeleteProductAttributes, opts ...client.CallOption) (*product_attribute.Out_DeleteProductAttributes, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeHandler.DeleteProductAttributes", in)
	out := new(product_attribute.Out_DeleteProductAttributes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeHandlerService) CreateProductAttribute(ctx context.Context, in *product_attribute.In_CreateProductAttribute, opts ...client.CallOption) (*product_attribute.Out_CreateProductAttribute, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeHandler.CreateProductAttribute", in)
	out := new(product_attribute.Out_CreateProductAttribute)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeHandlerService) GetProductAttributeList(ctx context.Context, in *product_attribute.In_GetProductAttributeList, opts ...client.CallOption) (*product_attribute.Out_GetProductAttributeList, error) {
	req := c.c.NewRequest(c.name, "ProductAttributeHandler.GetProductAttributeList", in)
	out := new(product_attribute.Out_GetProductAttributeList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductAttributeHandler service

type ProductAttributeHandlerHandler interface {
	//获取信息
	GetProductAttributeById(context.Context, *product_attribute.In_GetProductAttributeById, *product_attribute.Out_GetProductAttributeById) error
	//修改信息
	UpdateProductAttributeInfo(context.Context, *product_attribute.In_UpdateProductAttributeInfo, *product_attribute.Out_UpdateProductAttributeInfo) error
	//获取列表
	GetProductAttributes(context.Context, *product_attribute.In_GetProductAttributes, *product_attribute.Out_GetProductAttributes) error
	//删除列表
	DeleteProductAttributes(context.Context, *product_attribute.In_DeleteProductAttributes, *product_attribute.Out_DeleteProductAttributes) error
	//新建信息
	CreateProductAttribute(context.Context, *product_attribute.In_CreateProductAttribute, *product_attribute.Out_CreateProductAttribute) error
	GetProductAttributeList(context.Context, *product_attribute.In_GetProductAttributeList, *product_attribute.Out_GetProductAttributeList) error
}

func RegisterProductAttributeHandlerHandler(s server.Server, hdlr ProductAttributeHandlerHandler, opts ...server.HandlerOption) error {
	type productAttributeHandler interface {
		GetProductAttributeById(ctx context.Context, in *product_attribute.In_GetProductAttributeById, out *product_attribute.Out_GetProductAttributeById) error
		UpdateProductAttributeInfo(ctx context.Context, in *product_attribute.In_UpdateProductAttributeInfo, out *product_attribute.Out_UpdateProductAttributeInfo) error
		GetProductAttributes(ctx context.Context, in *product_attribute.In_GetProductAttributes, out *product_attribute.Out_GetProductAttributes) error
		DeleteProductAttributes(ctx context.Context, in *product_attribute.In_DeleteProductAttributes, out *product_attribute.Out_DeleteProductAttributes) error
		CreateProductAttribute(ctx context.Context, in *product_attribute.In_CreateProductAttribute, out *product_attribute.Out_CreateProductAttribute) error
		GetProductAttributeList(ctx context.Context, in *product_attribute.In_GetProductAttributeList, out *product_attribute.Out_GetProductAttributeList) error
	}
	type ProductAttributeHandler struct {
		productAttributeHandler
	}
	h := &productAttributeHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductAttributeHandler{h}, opts...))
}

type productAttributeHandlerHandler struct {
	ProductAttributeHandlerHandler
}

func (h *productAttributeHandlerHandler) GetProductAttributeById(ctx context.Context, in *product_attribute.In_GetProductAttributeById, out *product_attribute.Out_GetProductAttributeById) error {
	return h.ProductAttributeHandlerHandler.GetProductAttributeById(ctx, in, out)
}

func (h *productAttributeHandlerHandler) UpdateProductAttributeInfo(ctx context.Context, in *product_attribute.In_UpdateProductAttributeInfo, out *product_attribute.Out_UpdateProductAttributeInfo) error {
	return h.ProductAttributeHandlerHandler.UpdateProductAttributeInfo(ctx, in, out)
}

func (h *productAttributeHandlerHandler) GetProductAttributes(ctx context.Context, in *product_attribute.In_GetProductAttributes, out *product_attribute.Out_GetProductAttributes) error {
	return h.ProductAttributeHandlerHandler.GetProductAttributes(ctx, in, out)
}

func (h *productAttributeHandlerHandler) DeleteProductAttributes(ctx context.Context, in *product_attribute.In_DeleteProductAttributes, out *product_attribute.Out_DeleteProductAttributes) error {
	return h.ProductAttributeHandlerHandler.DeleteProductAttributes(ctx, in, out)
}

func (h *productAttributeHandlerHandler) CreateProductAttribute(ctx context.Context, in *product_attribute.In_CreateProductAttribute, out *product_attribute.Out_CreateProductAttribute) error {
	return h.ProductAttributeHandlerHandler.CreateProductAttribute(ctx, in, out)
}

func (h *productAttributeHandlerHandler) GetProductAttributeList(ctx context.Context, in *product_attribute.In_GetProductAttributeList, out *product_attribute.Out_GetProductAttributeList) error {
	return h.ProductAttributeHandlerHandler.GetProductAttributeList(ctx, in, out)
}

// Client API for ProductSkuStockHandler service

type ProductSkuStockHandlerService interface {
	//获取信息
	GetProductSkuStockById(ctx context.Context, in *product_sku_stock.In_GetProductSkuStockById, opts ...client.CallOption) (*product_sku_stock.Out_GetProductSkuStockById, error)
	//修改信息
	UpdateProductSkuStockInfo(ctx context.Context, in *product_sku_stock.In_UpdateProductSkuStockInfo, opts ...client.CallOption) (*product_sku_stock.Out_UpdateProductSkuStockInfo, error)
	//获取列表
	GetProductSkuStocks(ctx context.Context, in *product_sku_stock.In_GetProductSkuStocks, opts ...client.CallOption) (*product_sku_stock.Out_GetProductSkuStocks, error)
	//删除列表
	DeleteProductSkuStocks(ctx context.Context, in *product_sku_stock.In_DeleteProductSkuStocks, opts ...client.CallOption) (*product_sku_stock.Out_DeleteProductSkuStocks, error)
	//新建信息
	CreateProductSkuStock(ctx context.Context, in *product_sku_stock.In_CreateProductSkuStock, opts ...client.CallOption) (*product_sku_stock.Out_CreateProductSkuStock, error)
	GetSellSkuStock(ctx context.Context, in *product_sku_stock.In_GetSellSkuStock, opts ...client.CallOption) (*product_sku_stock.Out_GetSellSkuStock, error)
}

type productSkuStockHandlerService struct {
	c    client.Client
	name string
}

func NewProductSkuStockHandlerService(name string, c client.Client) ProductSkuStockHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.invent"
	}
	return &productSkuStockHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productSkuStockHandlerService) GetProductSkuStockById(ctx context.Context, in *product_sku_stock.In_GetProductSkuStockById, opts ...client.CallOption) (*product_sku_stock.Out_GetProductSkuStockById, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.GetProductSkuStockById", in)
	out := new(product_sku_stock.Out_GetProductSkuStockById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) UpdateProductSkuStockInfo(ctx context.Context, in *product_sku_stock.In_UpdateProductSkuStockInfo, opts ...client.CallOption) (*product_sku_stock.Out_UpdateProductSkuStockInfo, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.UpdateProductSkuStockInfo", in)
	out := new(product_sku_stock.Out_UpdateProductSkuStockInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) GetProductSkuStocks(ctx context.Context, in *product_sku_stock.In_GetProductSkuStocks, opts ...client.CallOption) (*product_sku_stock.Out_GetProductSkuStocks, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.GetProductSkuStocks", in)
	out := new(product_sku_stock.Out_GetProductSkuStocks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) DeleteProductSkuStocks(ctx context.Context, in *product_sku_stock.In_DeleteProductSkuStocks, opts ...client.CallOption) (*product_sku_stock.Out_DeleteProductSkuStocks, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.DeleteProductSkuStocks", in)
	out := new(product_sku_stock.Out_DeleteProductSkuStocks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) CreateProductSkuStock(ctx context.Context, in *product_sku_stock.In_CreateProductSkuStock, opts ...client.CallOption) (*product_sku_stock.Out_CreateProductSkuStock, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.CreateProductSkuStock", in)
	out := new(product_sku_stock.Out_CreateProductSkuStock)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuStockHandlerService) GetSellSkuStock(ctx context.Context, in *product_sku_stock.In_GetSellSkuStock, opts ...client.CallOption) (*product_sku_stock.Out_GetSellSkuStock, error) {
	req := c.c.NewRequest(c.name, "ProductSkuStockHandler.GetSellSkuStock", in)
	out := new(product_sku_stock.Out_GetSellSkuStock)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductSkuStockHandler service

type ProductSkuStockHandlerHandler interface {
	//获取信息
	GetProductSkuStockById(context.Context, *product_sku_stock.In_GetProductSkuStockById, *product_sku_stock.Out_GetProductSkuStockById) error
	//修改信息
	UpdateProductSkuStockInfo(context.Context, *product_sku_stock.In_UpdateProductSkuStockInfo, *product_sku_stock.Out_UpdateProductSkuStockInfo) error
	//获取列表
	GetProductSkuStocks(context.Context, *product_sku_stock.In_GetProductSkuStocks, *product_sku_stock.Out_GetProductSkuStocks) error
	//删除列表
	DeleteProductSkuStocks(context.Context, *product_sku_stock.In_DeleteProductSkuStocks, *product_sku_stock.Out_DeleteProductSkuStocks) error
	//新建信息
	CreateProductSkuStock(context.Context, *product_sku_stock.In_CreateProductSkuStock, *product_sku_stock.Out_CreateProductSkuStock) error
	GetSellSkuStock(context.Context, *product_sku_stock.In_GetSellSkuStock, *product_sku_stock.Out_GetSellSkuStock) error
}

func RegisterProductSkuStockHandlerHandler(s server.Server, hdlr ProductSkuStockHandlerHandler, opts ...server.HandlerOption) error {
	type productSkuStockHandler interface {
		GetProductSkuStockById(ctx context.Context, in *product_sku_stock.In_GetProductSkuStockById, out *product_sku_stock.Out_GetProductSkuStockById) error
		UpdateProductSkuStockInfo(ctx context.Context, in *product_sku_stock.In_UpdateProductSkuStockInfo, out *product_sku_stock.Out_UpdateProductSkuStockInfo) error
		GetProductSkuStocks(ctx context.Context, in *product_sku_stock.In_GetProductSkuStocks, out *product_sku_stock.Out_GetProductSkuStocks) error
		DeleteProductSkuStocks(ctx context.Context, in *product_sku_stock.In_DeleteProductSkuStocks, out *product_sku_stock.Out_DeleteProductSkuStocks) error
		CreateProductSkuStock(ctx context.Context, in *product_sku_stock.In_CreateProductSkuStock, out *product_sku_stock.Out_CreateProductSkuStock) error
		GetSellSkuStock(ctx context.Context, in *product_sku_stock.In_GetSellSkuStock, out *product_sku_stock.Out_GetSellSkuStock) error
	}
	type ProductSkuStockHandler struct {
		productSkuStockHandler
	}
	h := &productSkuStockHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductSkuStockHandler{h}, opts...))
}

type productSkuStockHandlerHandler struct {
	ProductSkuStockHandlerHandler
}

func (h *productSkuStockHandlerHandler) GetProductSkuStockById(ctx context.Context, in *product_sku_stock.In_GetProductSkuStockById, out *product_sku_stock.Out_GetProductSkuStockById) error {
	return h.ProductSkuStockHandlerHandler.GetProductSkuStockById(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) UpdateProductSkuStockInfo(ctx context.Context, in *product_sku_stock.In_UpdateProductSkuStockInfo, out *product_sku_stock.Out_UpdateProductSkuStockInfo) error {
	return h.ProductSkuStockHandlerHandler.UpdateProductSkuStockInfo(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) GetProductSkuStocks(ctx context.Context, in *product_sku_stock.In_GetProductSkuStocks, out *product_sku_stock.Out_GetProductSkuStocks) error {
	return h.ProductSkuStockHandlerHandler.GetProductSkuStocks(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) DeleteProductSkuStocks(ctx context.Context, in *product_sku_stock.In_DeleteProductSkuStocks, out *product_sku_stock.Out_DeleteProductSkuStocks) error {
	return h.ProductSkuStockHandlerHandler.DeleteProductSkuStocks(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) CreateProductSkuStock(ctx context.Context, in *product_sku_stock.In_CreateProductSkuStock, out *product_sku_stock.Out_CreateProductSkuStock) error {
	return h.ProductSkuStockHandlerHandler.CreateProductSkuStock(ctx, in, out)
}

func (h *productSkuStockHandlerHandler) GetSellSkuStock(ctx context.Context, in *product_sku_stock.In_GetSellSkuStock, out *product_sku_stock.Out_GetSellSkuStock) error {
	return h.ProductSkuStockHandlerHandler.GetSellSkuStock(ctx, in, out)
}
