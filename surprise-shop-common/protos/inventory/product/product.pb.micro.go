// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product.proto

package product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductHandler service

type ProductHandlerService interface {
	//获取信息
	GetProductById(ctx context.Context, in *In_GetProductById, opts ...client.CallOption) (*Out_GetProductById, error)
	//修改信息
	UpdateProductInfo(ctx context.Context, in *In_UpdateProductInfo, opts ...client.CallOption) (*Out_UpdateProductInfo, error)
	//获取列表
	GetProducts(ctx context.Context, in *In_GetProducts, opts ...client.CallOption) (*Out_GetProducts, error)
	//删除列表
	DeleteProducts(ctx context.Context, in *In_DeleteProducts, opts ...client.CallOption) (*Out_DeleteProducts, error)
	//新建信息
	CreateProduct(ctx context.Context, in *In_CreateProduct, opts ...client.CallOption) (*Out_CreateProduct, error)
}

type productHandlerService struct {
	c    client.Client
	name string
}

func NewProductHandlerService(name string, c client.Client) ProductHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "product"
	}
	return &productHandlerService{
		c:    c,
		name: name,
	}
}

func (c *productHandlerService) GetProductById(ctx context.Context, in *In_GetProductById, opts ...client.CallOption) (*Out_GetProductById, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.GetProductById", in)
	out := new(Out_GetProductById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) UpdateProductInfo(ctx context.Context, in *In_UpdateProductInfo, opts ...client.CallOption) (*Out_UpdateProductInfo, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.UpdateProductInfo", in)
	out := new(Out_UpdateProductInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) GetProducts(ctx context.Context, in *In_GetProducts, opts ...client.CallOption) (*Out_GetProducts, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.GetProducts", in)
	out := new(Out_GetProducts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) DeleteProducts(ctx context.Context, in *In_DeleteProducts, opts ...client.CallOption) (*Out_DeleteProducts, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.DeleteProducts", in)
	out := new(Out_DeleteProducts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerService) CreateProduct(ctx context.Context, in *In_CreateProduct, opts ...client.CallOption) (*Out_CreateProduct, error) {
	req := c.c.NewRequest(c.name, "ProductHandler.CreateProduct", in)
	out := new(Out_CreateProduct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductHandler service

type ProductHandlerHandler interface {
	//获取信息
	GetProductById(context.Context, *In_GetProductById, *Out_GetProductById) error
	//修改信息
	UpdateProductInfo(context.Context, *In_UpdateProductInfo, *Out_UpdateProductInfo) error
	//获取列表
	GetProducts(context.Context, *In_GetProducts, *Out_GetProducts) error
	//删除列表
	DeleteProducts(context.Context, *In_DeleteProducts, *Out_DeleteProducts) error
	//新建信息
	CreateProduct(context.Context, *In_CreateProduct, *Out_CreateProduct) error
}

func RegisterProductHandlerHandler(s server.Server, hdlr ProductHandlerHandler, opts ...server.HandlerOption) error {
	type productHandler interface {
		GetProductById(ctx context.Context, in *In_GetProductById, out *Out_GetProductById) error
		UpdateProductInfo(ctx context.Context, in *In_UpdateProductInfo, out *Out_UpdateProductInfo) error
		GetProducts(ctx context.Context, in *In_GetProducts, out *Out_GetProducts) error
		DeleteProducts(ctx context.Context, in *In_DeleteProducts, out *Out_DeleteProducts) error
		CreateProduct(ctx context.Context, in *In_CreateProduct, out *Out_CreateProduct) error
	}
	type ProductHandler struct {
		productHandler
	}
	h := &productHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductHandler{h}, opts...))
}

type productHandlerHandler struct {
	ProductHandlerHandler
}

func (h *productHandlerHandler) GetProductById(ctx context.Context, in *In_GetProductById, out *Out_GetProductById) error {
	return h.ProductHandlerHandler.GetProductById(ctx, in, out)
}

func (h *productHandlerHandler) UpdateProductInfo(ctx context.Context, in *In_UpdateProductInfo, out *Out_UpdateProductInfo) error {
	return h.ProductHandlerHandler.UpdateProductInfo(ctx, in, out)
}

func (h *productHandlerHandler) GetProducts(ctx context.Context, in *In_GetProducts, out *Out_GetProducts) error {
	return h.ProductHandlerHandler.GetProducts(ctx, in, out)
}

func (h *productHandlerHandler) DeleteProducts(ctx context.Context, in *In_DeleteProducts, out *Out_DeleteProducts) error {
	return h.ProductHandlerHandler.DeleteProducts(ctx, in, out)
}

func (h *productHandlerHandler) CreateProduct(ctx context.Context, in *In_CreateProduct, out *Out_CreateProduct) error {
	return h.ProductHandlerHandler.CreateProduct(ctx, in, out)
}
