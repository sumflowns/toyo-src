// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user_addr.proto

package proto_user_addr

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserAddrService service

type UserAddrService interface {
	//获取信息
	GetUserAddrInfoById(ctx context.Context, in *In_GetUserAddrInfoById, opts ...client.CallOption) (*Out_GetUserAddrInfoById, error)
	//修改信息
	UpdateUserAddrInfo(ctx context.Context, in *In_UpdateUserAddrInfo, opts ...client.CallOption) (*Out_UpdateUserAddrInfo, error)
	//获取列表
	GetUserAddrs(ctx context.Context, in *In_GetUserAddrs, opts ...client.CallOption) (*Out_GetUserAddrs, error)
	//删除列表
	DeleteUserAddrs(ctx context.Context, in *In_DeleteUserAddrs, opts ...client.CallOption) (*Out_DeleteUserAddrs, error)
	//新建信息
	CreateUserAddr(ctx context.Context, in *In_CreateUserAddr, opts ...client.CallOption) (*Out_CreateUserAddr, error)
	//获取某人地址列表
	GetOneUserAddrs(ctx context.Context, in *In_GetOneUserAddrs, opts ...client.CallOption) (*Out_GetOneUserAddrs, error)
}

type userAddrService struct {
	c    client.Client
	name string
}

func NewUserAddrService(name string, c client.Client) UserAddrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto_user_addr"
	}
	return &userAddrService{
		c:    c,
		name: name,
	}
}

func (c *userAddrService) GetUserAddrInfoById(ctx context.Context, in *In_GetUserAddrInfoById, opts ...client.CallOption) (*Out_GetUserAddrInfoById, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.GetUserAddrInfoById", in)
	out := new(Out_GetUserAddrInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) UpdateUserAddrInfo(ctx context.Context, in *In_UpdateUserAddrInfo, opts ...client.CallOption) (*Out_UpdateUserAddrInfo, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.UpdateUserAddrInfo", in)
	out := new(Out_UpdateUserAddrInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) GetUserAddrs(ctx context.Context, in *In_GetUserAddrs, opts ...client.CallOption) (*Out_GetUserAddrs, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.GetUserAddrs", in)
	out := new(Out_GetUserAddrs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) DeleteUserAddrs(ctx context.Context, in *In_DeleteUserAddrs, opts ...client.CallOption) (*Out_DeleteUserAddrs, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.DeleteUserAddrs", in)
	out := new(Out_DeleteUserAddrs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) CreateUserAddr(ctx context.Context, in *In_CreateUserAddr, opts ...client.CallOption) (*Out_CreateUserAddr, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.CreateUserAddr", in)
	out := new(Out_CreateUserAddr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) GetOneUserAddrs(ctx context.Context, in *In_GetOneUserAddrs, opts ...client.CallOption) (*Out_GetOneUserAddrs, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.GetOneUserAddrs", in)
	out := new(Out_GetOneUserAddrs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAddrService service

type UserAddrServiceHandler interface {
	//获取信息
	GetUserAddrInfoById(context.Context, *In_GetUserAddrInfoById, *Out_GetUserAddrInfoById) error
	//修改信息
	UpdateUserAddrInfo(context.Context, *In_UpdateUserAddrInfo, *Out_UpdateUserAddrInfo) error
	//获取列表
	GetUserAddrs(context.Context, *In_GetUserAddrs, *Out_GetUserAddrs) error
	//删除列表
	DeleteUserAddrs(context.Context, *In_DeleteUserAddrs, *Out_DeleteUserAddrs) error
	//新建信息
	CreateUserAddr(context.Context, *In_CreateUserAddr, *Out_CreateUserAddr) error
	//获取某人地址列表
	GetOneUserAddrs(context.Context, *In_GetOneUserAddrs, *Out_GetOneUserAddrs) error
}

func RegisterUserAddrServiceHandler(s server.Server, hdlr UserAddrServiceHandler, opts ...server.HandlerOption) error {
	type userAddrService interface {
		GetUserAddrInfoById(ctx context.Context, in *In_GetUserAddrInfoById, out *Out_GetUserAddrInfoById) error
		UpdateUserAddrInfo(ctx context.Context, in *In_UpdateUserAddrInfo, out *Out_UpdateUserAddrInfo) error
		GetUserAddrs(ctx context.Context, in *In_GetUserAddrs, out *Out_GetUserAddrs) error
		DeleteUserAddrs(ctx context.Context, in *In_DeleteUserAddrs, out *Out_DeleteUserAddrs) error
		CreateUserAddr(ctx context.Context, in *In_CreateUserAddr, out *Out_CreateUserAddr) error
		GetOneUserAddrs(ctx context.Context, in *In_GetOneUserAddrs, out *Out_GetOneUserAddrs) error
	}
	type UserAddrService struct {
		userAddrService
	}
	h := &userAddrServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAddrService{h}, opts...))
}

type userAddrServiceHandler struct {
	UserAddrServiceHandler
}

func (h *userAddrServiceHandler) GetUserAddrInfoById(ctx context.Context, in *In_GetUserAddrInfoById, out *Out_GetUserAddrInfoById) error {
	return h.UserAddrServiceHandler.GetUserAddrInfoById(ctx, in, out)
}

func (h *userAddrServiceHandler) UpdateUserAddrInfo(ctx context.Context, in *In_UpdateUserAddrInfo, out *Out_UpdateUserAddrInfo) error {
	return h.UserAddrServiceHandler.UpdateUserAddrInfo(ctx, in, out)
}

func (h *userAddrServiceHandler) GetUserAddrs(ctx context.Context, in *In_GetUserAddrs, out *Out_GetUserAddrs) error {
	return h.UserAddrServiceHandler.GetUserAddrs(ctx, in, out)
}

func (h *userAddrServiceHandler) DeleteUserAddrs(ctx context.Context, in *In_DeleteUserAddrs, out *Out_DeleteUserAddrs) error {
	return h.UserAddrServiceHandler.DeleteUserAddrs(ctx, in, out)
}

func (h *userAddrServiceHandler) CreateUserAddr(ctx context.Context, in *In_CreateUserAddr, out *Out_CreateUserAddr) error {
	return h.UserAddrServiceHandler.CreateUserAddr(ctx, in, out)
}

func (h *userAddrServiceHandler) GetOneUserAddrs(ctx context.Context, in *In_GetOneUserAddrs, out *Out_GetOneUserAddrs) error {
	return h.UserAddrServiceHandler.GetOneUserAddrs(ctx, in, out)
}
