// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user_point_log.proto

package user_point_log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserPointLogService service

type UserPointLogService interface {
	//获取信息
	GetUserPointLogInfoById(ctx context.Context, in *In_GetUserPointLogInfoById, opts ...client.CallOption) (*Out_GetUserPointLogInfoById, error)
	//修改信息
	UpdateUserPointLogInfo(ctx context.Context, in *In_UpdateUserPointLogInfo, opts ...client.CallOption) (*Out_UpdateUserPointLogInfo, error)
	//获取列表
	GetUserPointLogs(ctx context.Context, in *In_GetUserPointLogs, opts ...client.CallOption) (*Out_GetUserPointLogs, error)
	//删除列表
	DeleteUserPointLogs(ctx context.Context, in *In_DeleteUserPointLogs, opts ...client.CallOption) (*Out_DeleteUserPointLogs, error)
	//新建信息
	CreateUserPointLog(ctx context.Context, in *In_CreateUserPointLog, opts ...client.CallOption) (*Out_CreateUserPointLog, error)
}

type userPointLogService struct {
	c    client.Client
	name string
}

func NewUserPointLogService(name string, c client.Client) UserPointLogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user_point_log"
	}
	return &userPointLogService{
		c:    c,
		name: name,
	}
}

func (c *userPointLogService) GetUserPointLogInfoById(ctx context.Context, in *In_GetUserPointLogInfoById, opts ...client.CallOption) (*Out_GetUserPointLogInfoById, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.GetUserPointLogInfoById", in)
	out := new(Out_GetUserPointLogInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) UpdateUserPointLogInfo(ctx context.Context, in *In_UpdateUserPointLogInfo, opts ...client.CallOption) (*Out_UpdateUserPointLogInfo, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.UpdateUserPointLogInfo", in)
	out := new(Out_UpdateUserPointLogInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) GetUserPointLogs(ctx context.Context, in *In_GetUserPointLogs, opts ...client.CallOption) (*Out_GetUserPointLogs, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.GetUserPointLogs", in)
	out := new(Out_GetUserPointLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) DeleteUserPointLogs(ctx context.Context, in *In_DeleteUserPointLogs, opts ...client.CallOption) (*Out_DeleteUserPointLogs, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.DeleteUserPointLogs", in)
	out := new(Out_DeleteUserPointLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) CreateUserPointLog(ctx context.Context, in *In_CreateUserPointLog, opts ...client.CallOption) (*Out_CreateUserPointLog, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.CreateUserPointLog", in)
	out := new(Out_CreateUserPointLog)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserPointLogService service

type UserPointLogServiceHandler interface {
	//获取信息
	GetUserPointLogInfoById(context.Context, *In_GetUserPointLogInfoById, *Out_GetUserPointLogInfoById) error
	//修改信息
	UpdateUserPointLogInfo(context.Context, *In_UpdateUserPointLogInfo, *Out_UpdateUserPointLogInfo) error
	//获取列表
	GetUserPointLogs(context.Context, *In_GetUserPointLogs, *Out_GetUserPointLogs) error
	//删除列表
	DeleteUserPointLogs(context.Context, *In_DeleteUserPointLogs, *Out_DeleteUserPointLogs) error
	//新建信息
	CreateUserPointLog(context.Context, *In_CreateUserPointLog, *Out_CreateUserPointLog) error
}

func RegisterUserPointLogServiceHandler(s server.Server, hdlr UserPointLogServiceHandler, opts ...server.HandlerOption) error {
	type userPointLogService interface {
		GetUserPointLogInfoById(ctx context.Context, in *In_GetUserPointLogInfoById, out *Out_GetUserPointLogInfoById) error
		UpdateUserPointLogInfo(ctx context.Context, in *In_UpdateUserPointLogInfo, out *Out_UpdateUserPointLogInfo) error
		GetUserPointLogs(ctx context.Context, in *In_GetUserPointLogs, out *Out_GetUserPointLogs) error
		DeleteUserPointLogs(ctx context.Context, in *In_DeleteUserPointLogs, out *Out_DeleteUserPointLogs) error
		CreateUserPointLog(ctx context.Context, in *In_CreateUserPointLog, out *Out_CreateUserPointLog) error
	}
	type UserPointLogService struct {
		userPointLogService
	}
	h := &userPointLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserPointLogService{h}, opts...))
}

type userPointLogServiceHandler struct {
	UserPointLogServiceHandler
}

func (h *userPointLogServiceHandler) GetUserPointLogInfoById(ctx context.Context, in *In_GetUserPointLogInfoById, out *Out_GetUserPointLogInfoById) error {
	return h.UserPointLogServiceHandler.GetUserPointLogInfoById(ctx, in, out)
}

func (h *userPointLogServiceHandler) UpdateUserPointLogInfo(ctx context.Context, in *In_UpdateUserPointLogInfo, out *Out_UpdateUserPointLogInfo) error {
	return h.UserPointLogServiceHandler.UpdateUserPointLogInfo(ctx, in, out)
}

func (h *userPointLogServiceHandler) GetUserPointLogs(ctx context.Context, in *In_GetUserPointLogs, out *Out_GetUserPointLogs) error {
	return h.UserPointLogServiceHandler.GetUserPointLogs(ctx, in, out)
}

func (h *userPointLogServiceHandler) DeleteUserPointLogs(ctx context.Context, in *In_DeleteUserPointLogs, out *Out_DeleteUserPointLogs) error {
	return h.UserPointLogServiceHandler.DeleteUserPointLogs(ctx, in, out)
}

func (h *userPointLogServiceHandler) CreateUserPointLog(ctx context.Context, in *In_CreateUserPointLog, out *Out_CreateUserPointLog) error {
	return h.UserPointLogServiceHandler.CreateUserPointLog(ctx, in, out)
}
