// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user_balance_log.proto

package user_balance_log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserBalanceService service

type UserBalanceService interface {
	//获取信息
	GetUserBalanceInfoById(ctx context.Context, in *In_GetUserBalanceInfoById, opts ...client.CallOption) (*Out_GetUserBalanceInfoById, error)
	//修改信息
	UpdateUserBalanceInfo(ctx context.Context, in *In_UpdateUserBalanceInfo, opts ...client.CallOption) (*Out_UpdateUserBalanceInfo, error)
	//获取列表
	GetUserBalances(ctx context.Context, in *In_GetUserBalances, opts ...client.CallOption) (*Out_GetUserBalances, error)
	//删除列表
	DeleteUserBalances(ctx context.Context, in *In_DeleteUserBalances, opts ...client.CallOption) (*Out_DeleteUserBalances, error)
	//新建信息
	CreateUserBalance(ctx context.Context, in *In_CreateUserBalance, opts ...client.CallOption) (*Out_CreateUserBalance, error)
}

type userBalanceService struct {
	c    client.Client
	name string
}

func NewUserBalanceService(name string, c client.Client) UserBalanceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user_balance_log"
	}
	return &userBalanceService{
		c:    c,
		name: name,
	}
}

func (c *userBalanceService) GetUserBalanceInfoById(ctx context.Context, in *In_GetUserBalanceInfoById, opts ...client.CallOption) (*Out_GetUserBalanceInfoById, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.GetUserBalanceInfoById", in)
	out := new(Out_GetUserBalanceInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) UpdateUserBalanceInfo(ctx context.Context, in *In_UpdateUserBalanceInfo, opts ...client.CallOption) (*Out_UpdateUserBalanceInfo, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.UpdateUserBalanceInfo", in)
	out := new(Out_UpdateUserBalanceInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) GetUserBalances(ctx context.Context, in *In_GetUserBalances, opts ...client.CallOption) (*Out_GetUserBalances, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.GetUserBalances", in)
	out := new(Out_GetUserBalances)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) DeleteUserBalances(ctx context.Context, in *In_DeleteUserBalances, opts ...client.CallOption) (*Out_DeleteUserBalances, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.DeleteUserBalances", in)
	out := new(Out_DeleteUserBalances)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) CreateUserBalance(ctx context.Context, in *In_CreateUserBalance, opts ...client.CallOption) (*Out_CreateUserBalance, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.CreateUserBalance", in)
	out := new(Out_CreateUserBalance)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserBalanceService service

type UserBalanceServiceHandler interface {
	//获取信息
	GetUserBalanceInfoById(context.Context, *In_GetUserBalanceInfoById, *Out_GetUserBalanceInfoById) error
	//修改信息
	UpdateUserBalanceInfo(context.Context, *In_UpdateUserBalanceInfo, *Out_UpdateUserBalanceInfo) error
	//获取列表
	GetUserBalances(context.Context, *In_GetUserBalances, *Out_GetUserBalances) error
	//删除列表
	DeleteUserBalances(context.Context, *In_DeleteUserBalances, *Out_DeleteUserBalances) error
	//新建信息
	CreateUserBalance(context.Context, *In_CreateUserBalance, *Out_CreateUserBalance) error
}

func RegisterUserBalanceServiceHandler(s server.Server, hdlr UserBalanceServiceHandler, opts ...server.HandlerOption) error {
	type userBalanceService interface {
		GetUserBalanceInfoById(ctx context.Context, in *In_GetUserBalanceInfoById, out *Out_GetUserBalanceInfoById) error
		UpdateUserBalanceInfo(ctx context.Context, in *In_UpdateUserBalanceInfo, out *Out_UpdateUserBalanceInfo) error
		GetUserBalances(ctx context.Context, in *In_GetUserBalances, out *Out_GetUserBalances) error
		DeleteUserBalances(ctx context.Context, in *In_DeleteUserBalances, out *Out_DeleteUserBalances) error
		CreateUserBalance(ctx context.Context, in *In_CreateUserBalance, out *Out_CreateUserBalance) error
	}
	type UserBalanceService struct {
		userBalanceService
	}
	h := &userBalanceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserBalanceService{h}, opts...))
}

type userBalanceServiceHandler struct {
	UserBalanceServiceHandler
}

func (h *userBalanceServiceHandler) GetUserBalanceInfoById(ctx context.Context, in *In_GetUserBalanceInfoById, out *Out_GetUserBalanceInfoById) error {
	return h.UserBalanceServiceHandler.GetUserBalanceInfoById(ctx, in, out)
}

func (h *userBalanceServiceHandler) UpdateUserBalanceInfo(ctx context.Context, in *In_UpdateUserBalanceInfo, out *Out_UpdateUserBalanceInfo) error {
	return h.UserBalanceServiceHandler.UpdateUserBalanceInfo(ctx, in, out)
}

func (h *userBalanceServiceHandler) GetUserBalances(ctx context.Context, in *In_GetUserBalances, out *Out_GetUserBalances) error {
	return h.UserBalanceServiceHandler.GetUserBalances(ctx, in, out)
}

func (h *userBalanceServiceHandler) DeleteUserBalances(ctx context.Context, in *In_DeleteUserBalances, out *Out_DeleteUserBalances) error {
	return h.UserBalanceServiceHandler.DeleteUserBalances(ctx, in, out)
}

func (h *userBalanceServiceHandler) CreateUserBalance(ctx context.Context, in *In_CreateUserBalance, out *Out_CreateUserBalance) error {
	return h.UserBalanceServiceHandler.CreateUserBalance(ctx, in, out)
}
