// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package com_surprise_shop_srv_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	user_addr "common/protos/user/user_addr"
	user_balance_log "common/protos/user/user_balance_log"
	user_info "common/protos/user/user_info"
	user_level "common/protos/user/user_level"
	user_login_log "common/protos/user/user_login_log"
	user_point_log "common/protos/user/user_point_log"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserInfo service

type UserInfoService interface {
	//用户登陆
	DoneUserLogin(ctx context.Context, in *user_info.InDoneUserLogin, opts ...client.CallOption) (*user_info.OutDoneUserLogin, error)
	//获取用户详细信息
	GetUserInfo(ctx context.Context, in *user_info.InGetUserInfo, opts ...client.CallOption) (*user_info.OutGetUserInfo, error)
	//获取用户列表
	GetUserInfoList(ctx context.Context, in *user_info.InGetUserInfoList, opts ...client.CallOption) (*user_info.OutGetUserInfoList, error)
	//修改用户信息
	UpdateUserInfo(ctx context.Context, in *user_info.InUpdateUserInfo, opts ...client.CallOption) (*user_info.OutUpdateUserInfo, error)
	//用户注册
	DoneUserRegister(ctx context.Context, in *user_info.InDoneUserRegister, opts ...client.CallOption) (*user_info.OutDoneUserRegister, error)
	//获取验证码
	GetVerificationCode(ctx context.Context, in *user_info.InGetVerificationCode, opts ...client.CallOption) (*user_info.OutGetVerificationCode, error)
}

type userInfoService struct {
	c    client.Client
	name string
}

func NewUserInfoService(name string, c client.Client) UserInfoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.user"
	}
	return &userInfoService{
		c:    c,
		name: name,
	}
}

func (c *userInfoService) DoneUserLogin(ctx context.Context, in *user_info.InDoneUserLogin, opts ...client.CallOption) (*user_info.OutDoneUserLogin, error) {
	req := c.c.NewRequest(c.name, "UserInfo.DoneUserLogin", in)
	out := new(user_info.OutDoneUserLogin)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoService) GetUserInfo(ctx context.Context, in *user_info.InGetUserInfo, opts ...client.CallOption) (*user_info.OutGetUserInfo, error) {
	req := c.c.NewRequest(c.name, "UserInfo.GetUserInfo", in)
	out := new(user_info.OutGetUserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoService) GetUserInfoList(ctx context.Context, in *user_info.InGetUserInfoList, opts ...client.CallOption) (*user_info.OutGetUserInfoList, error) {
	req := c.c.NewRequest(c.name, "UserInfo.GetUserInfoList", in)
	out := new(user_info.OutGetUserInfoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoService) UpdateUserInfo(ctx context.Context, in *user_info.InUpdateUserInfo, opts ...client.CallOption) (*user_info.OutUpdateUserInfo, error) {
	req := c.c.NewRequest(c.name, "UserInfo.UpdateUserInfo", in)
	out := new(user_info.OutUpdateUserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoService) DoneUserRegister(ctx context.Context, in *user_info.InDoneUserRegister, opts ...client.CallOption) (*user_info.OutDoneUserRegister, error) {
	req := c.c.NewRequest(c.name, "UserInfo.DoneUserRegister", in)
	out := new(user_info.OutDoneUserRegister)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoService) GetVerificationCode(ctx context.Context, in *user_info.InGetVerificationCode, opts ...client.CallOption) (*user_info.OutGetVerificationCode, error) {
	req := c.c.NewRequest(c.name, "UserInfo.GetVerificationCode", in)
	out := new(user_info.OutGetVerificationCode)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserInfo service

type UserInfoHandler interface {
	//用户登陆
	DoneUserLogin(context.Context, *user_info.InDoneUserLogin, *user_info.OutDoneUserLogin) error
	//获取用户详细信息
	GetUserInfo(context.Context, *user_info.InGetUserInfo, *user_info.OutGetUserInfo) error
	//获取用户列表
	GetUserInfoList(context.Context, *user_info.InGetUserInfoList, *user_info.OutGetUserInfoList) error
	//修改用户信息
	UpdateUserInfo(context.Context, *user_info.InUpdateUserInfo, *user_info.OutUpdateUserInfo) error
	//用户注册
	DoneUserRegister(context.Context, *user_info.InDoneUserRegister, *user_info.OutDoneUserRegister) error
	//获取验证码
	GetVerificationCode(context.Context, *user_info.InGetVerificationCode, *user_info.OutGetVerificationCode) error
}

func RegisterUserInfoHandler(s server.Server, hdlr UserInfoHandler, opts ...server.HandlerOption) error {
	type userInfo interface {
		DoneUserLogin(ctx context.Context, in *user_info.InDoneUserLogin, out *user_info.OutDoneUserLogin) error
		GetUserInfo(ctx context.Context, in *user_info.InGetUserInfo, out *user_info.OutGetUserInfo) error
		GetUserInfoList(ctx context.Context, in *user_info.InGetUserInfoList, out *user_info.OutGetUserInfoList) error
		UpdateUserInfo(ctx context.Context, in *user_info.InUpdateUserInfo, out *user_info.OutUpdateUserInfo) error
		DoneUserRegister(ctx context.Context, in *user_info.InDoneUserRegister, out *user_info.OutDoneUserRegister) error
		GetVerificationCode(ctx context.Context, in *user_info.InGetVerificationCode, out *user_info.OutGetVerificationCode) error
	}
	type UserInfo struct {
		userInfo
	}
	h := &userInfoHandler{hdlr}
	return s.Handle(s.NewHandler(&UserInfo{h}, opts...))
}

type userInfoHandler struct {
	UserInfoHandler
}

func (h *userInfoHandler) DoneUserLogin(ctx context.Context, in *user_info.InDoneUserLogin, out *user_info.OutDoneUserLogin) error {
	return h.UserInfoHandler.DoneUserLogin(ctx, in, out)
}

func (h *userInfoHandler) GetUserInfo(ctx context.Context, in *user_info.InGetUserInfo, out *user_info.OutGetUserInfo) error {
	return h.UserInfoHandler.GetUserInfo(ctx, in, out)
}

func (h *userInfoHandler) GetUserInfoList(ctx context.Context, in *user_info.InGetUserInfoList, out *user_info.OutGetUserInfoList) error {
	return h.UserInfoHandler.GetUserInfoList(ctx, in, out)
}

func (h *userInfoHandler) UpdateUserInfo(ctx context.Context, in *user_info.InUpdateUserInfo, out *user_info.OutUpdateUserInfo) error {
	return h.UserInfoHandler.UpdateUserInfo(ctx, in, out)
}

func (h *userInfoHandler) DoneUserRegister(ctx context.Context, in *user_info.InDoneUserRegister, out *user_info.OutDoneUserRegister) error {
	return h.UserInfoHandler.DoneUserRegister(ctx, in, out)
}

func (h *userInfoHandler) GetVerificationCode(ctx context.Context, in *user_info.InGetVerificationCode, out *user_info.OutGetVerificationCode) error {
	return h.UserInfoHandler.GetVerificationCode(ctx, in, out)
}

// Client API for UserAddrService service

type UserAddrService interface {
	//获取信息
	GetUserAddrInfoById(ctx context.Context, in *user_addr.In_GetUserAddrInfoById, opts ...client.CallOption) (*user_addr.Out_GetUserAddrInfoById, error)
	//修改信息
	UpdateUserAddrInfo(ctx context.Context, in *user_addr.In_UpdateUserAddrInfo, opts ...client.CallOption) (*user_addr.Out_UpdateUserAddrInfo, error)
	//获取列表
	GetUserAddrs(ctx context.Context, in *user_addr.In_GetUserAddrs, opts ...client.CallOption) (*user_addr.Out_GetUserAddrs, error)
	//删除列表
	DeleteUserAddrs(ctx context.Context, in *user_addr.In_DeleteUserAddrs, opts ...client.CallOption) (*user_addr.Out_DeleteUserAddrs, error)
	//新建信息
	CreateUserAddr(ctx context.Context, in *user_addr.In_CreateUserAddr, opts ...client.CallOption) (*user_addr.Out_CreateUserAddr, error)
	//获取某人地址列表
	GetOneUserAddrs(ctx context.Context, in *user_addr.In_GetOneUserAddrs, opts ...client.CallOption) (*user_addr.Out_GetOneUserAddrs, error)
}

type userAddrService struct {
	c    client.Client
	name string
}

func NewUserAddrService(name string, c client.Client) UserAddrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.user"
	}
	return &userAddrService{
		c:    c,
		name: name,
	}
}

func (c *userAddrService) GetUserAddrInfoById(ctx context.Context, in *user_addr.In_GetUserAddrInfoById, opts ...client.CallOption) (*user_addr.Out_GetUserAddrInfoById, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.GetUserAddrInfoById", in)
	out := new(user_addr.Out_GetUserAddrInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) UpdateUserAddrInfo(ctx context.Context, in *user_addr.In_UpdateUserAddrInfo, opts ...client.CallOption) (*user_addr.Out_UpdateUserAddrInfo, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.UpdateUserAddrInfo", in)
	out := new(user_addr.Out_UpdateUserAddrInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) GetUserAddrs(ctx context.Context, in *user_addr.In_GetUserAddrs, opts ...client.CallOption) (*user_addr.Out_GetUserAddrs, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.GetUserAddrs", in)
	out := new(user_addr.Out_GetUserAddrs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) DeleteUserAddrs(ctx context.Context, in *user_addr.In_DeleteUserAddrs, opts ...client.CallOption) (*user_addr.Out_DeleteUserAddrs, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.DeleteUserAddrs", in)
	out := new(user_addr.Out_DeleteUserAddrs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) CreateUserAddr(ctx context.Context, in *user_addr.In_CreateUserAddr, opts ...client.CallOption) (*user_addr.Out_CreateUserAddr, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.CreateUserAddr", in)
	out := new(user_addr.Out_CreateUserAddr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddrService) GetOneUserAddrs(ctx context.Context, in *user_addr.In_GetOneUserAddrs, opts ...client.CallOption) (*user_addr.Out_GetOneUserAddrs, error) {
	req := c.c.NewRequest(c.name, "UserAddrService.GetOneUserAddrs", in)
	out := new(user_addr.Out_GetOneUserAddrs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAddrService service

type UserAddrServiceHandler interface {
	//获取信息
	GetUserAddrInfoById(context.Context, *user_addr.In_GetUserAddrInfoById, *user_addr.Out_GetUserAddrInfoById) error
	//修改信息
	UpdateUserAddrInfo(context.Context, *user_addr.In_UpdateUserAddrInfo, *user_addr.Out_UpdateUserAddrInfo) error
	//获取列表
	GetUserAddrs(context.Context, *user_addr.In_GetUserAddrs, *user_addr.Out_GetUserAddrs) error
	//删除列表
	DeleteUserAddrs(context.Context, *user_addr.In_DeleteUserAddrs, *user_addr.Out_DeleteUserAddrs) error
	//新建信息
	CreateUserAddr(context.Context, *user_addr.In_CreateUserAddr, *user_addr.Out_CreateUserAddr) error
	//获取某人地址列表
	GetOneUserAddrs(context.Context, *user_addr.In_GetOneUserAddrs, *user_addr.Out_GetOneUserAddrs) error
}

func RegisterUserAddrServiceHandler(s server.Server, hdlr UserAddrServiceHandler, opts ...server.HandlerOption) error {
	type userAddrService interface {
		GetUserAddrInfoById(ctx context.Context, in *user_addr.In_GetUserAddrInfoById, out *user_addr.Out_GetUserAddrInfoById) error
		UpdateUserAddrInfo(ctx context.Context, in *user_addr.In_UpdateUserAddrInfo, out *user_addr.Out_UpdateUserAddrInfo) error
		GetUserAddrs(ctx context.Context, in *user_addr.In_GetUserAddrs, out *user_addr.Out_GetUserAddrs) error
		DeleteUserAddrs(ctx context.Context, in *user_addr.In_DeleteUserAddrs, out *user_addr.Out_DeleteUserAddrs) error
		CreateUserAddr(ctx context.Context, in *user_addr.In_CreateUserAddr, out *user_addr.Out_CreateUserAddr) error
		GetOneUserAddrs(ctx context.Context, in *user_addr.In_GetOneUserAddrs, out *user_addr.Out_GetOneUserAddrs) error
	}
	type UserAddrService struct {
		userAddrService
	}
	h := &userAddrServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAddrService{h}, opts...))
}

type userAddrServiceHandler struct {
	UserAddrServiceHandler
}

func (h *userAddrServiceHandler) GetUserAddrInfoById(ctx context.Context, in *user_addr.In_GetUserAddrInfoById, out *user_addr.Out_GetUserAddrInfoById) error {
	return h.UserAddrServiceHandler.GetUserAddrInfoById(ctx, in, out)
}

func (h *userAddrServiceHandler) UpdateUserAddrInfo(ctx context.Context, in *user_addr.In_UpdateUserAddrInfo, out *user_addr.Out_UpdateUserAddrInfo) error {
	return h.UserAddrServiceHandler.UpdateUserAddrInfo(ctx, in, out)
}

func (h *userAddrServiceHandler) GetUserAddrs(ctx context.Context, in *user_addr.In_GetUserAddrs, out *user_addr.Out_GetUserAddrs) error {
	return h.UserAddrServiceHandler.GetUserAddrs(ctx, in, out)
}

func (h *userAddrServiceHandler) DeleteUserAddrs(ctx context.Context, in *user_addr.In_DeleteUserAddrs, out *user_addr.Out_DeleteUserAddrs) error {
	return h.UserAddrServiceHandler.DeleteUserAddrs(ctx, in, out)
}

func (h *userAddrServiceHandler) CreateUserAddr(ctx context.Context, in *user_addr.In_CreateUserAddr, out *user_addr.Out_CreateUserAddr) error {
	return h.UserAddrServiceHandler.CreateUserAddr(ctx, in, out)
}

func (h *userAddrServiceHandler) GetOneUserAddrs(ctx context.Context, in *user_addr.In_GetOneUserAddrs, out *user_addr.Out_GetOneUserAddrs) error {
	return h.UserAddrServiceHandler.GetOneUserAddrs(ctx, in, out)
}

// Client API for UserBalanceService service

type UserBalanceService interface {
	//获取信息
	GetUserBalanceInfoById(ctx context.Context, in *user_balance_log.In_GetUserBalanceInfoById, opts ...client.CallOption) (*user_balance_log.Out_GetUserBalanceInfoById, error)
	//修改信息
	UpdateUserBalanceInfo(ctx context.Context, in *user_balance_log.In_UpdateUserBalanceInfo, opts ...client.CallOption) (*user_balance_log.Out_UpdateUserBalanceInfo, error)
	//获取列表
	GetUserBalances(ctx context.Context, in *user_balance_log.In_GetUserBalances, opts ...client.CallOption) (*user_balance_log.Out_GetUserBalances, error)
	//删除列表
	DeleteUserBalances(ctx context.Context, in *user_balance_log.In_DeleteUserBalances, opts ...client.CallOption) (*user_balance_log.Out_DeleteUserBalances, error)
	//新建信息
	CreateUserBalance(ctx context.Context, in *user_balance_log.In_CreateUserBalance, opts ...client.CallOption) (*user_balance_log.Out_CreateUserBalance, error)
}

type userBalanceService struct {
	c    client.Client
	name string
}

func NewUserBalanceService(name string, c client.Client) UserBalanceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.user"
	}
	return &userBalanceService{
		c:    c,
		name: name,
	}
}

func (c *userBalanceService) GetUserBalanceInfoById(ctx context.Context, in *user_balance_log.In_GetUserBalanceInfoById, opts ...client.CallOption) (*user_balance_log.Out_GetUserBalanceInfoById, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.GetUserBalanceInfoById", in)
	out := new(user_balance_log.Out_GetUserBalanceInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) UpdateUserBalanceInfo(ctx context.Context, in *user_balance_log.In_UpdateUserBalanceInfo, opts ...client.CallOption) (*user_balance_log.Out_UpdateUserBalanceInfo, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.UpdateUserBalanceInfo", in)
	out := new(user_balance_log.Out_UpdateUserBalanceInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) GetUserBalances(ctx context.Context, in *user_balance_log.In_GetUserBalances, opts ...client.CallOption) (*user_balance_log.Out_GetUserBalances, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.GetUserBalances", in)
	out := new(user_balance_log.Out_GetUserBalances)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) DeleteUserBalances(ctx context.Context, in *user_balance_log.In_DeleteUserBalances, opts ...client.CallOption) (*user_balance_log.Out_DeleteUserBalances, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.DeleteUserBalances", in)
	out := new(user_balance_log.Out_DeleteUserBalances)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceService) CreateUserBalance(ctx context.Context, in *user_balance_log.In_CreateUserBalance, opts ...client.CallOption) (*user_balance_log.Out_CreateUserBalance, error) {
	req := c.c.NewRequest(c.name, "UserBalanceService.CreateUserBalance", in)
	out := new(user_balance_log.Out_CreateUserBalance)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserBalanceService service

type UserBalanceServiceHandler interface {
	//获取信息
	GetUserBalanceInfoById(context.Context, *user_balance_log.In_GetUserBalanceInfoById, *user_balance_log.Out_GetUserBalanceInfoById) error
	//修改信息
	UpdateUserBalanceInfo(context.Context, *user_balance_log.In_UpdateUserBalanceInfo, *user_balance_log.Out_UpdateUserBalanceInfo) error
	//获取列表
	GetUserBalances(context.Context, *user_balance_log.In_GetUserBalances, *user_balance_log.Out_GetUserBalances) error
	//删除列表
	DeleteUserBalances(context.Context, *user_balance_log.In_DeleteUserBalances, *user_balance_log.Out_DeleteUserBalances) error
	//新建信息
	CreateUserBalance(context.Context, *user_balance_log.In_CreateUserBalance, *user_balance_log.Out_CreateUserBalance) error
}

func RegisterUserBalanceServiceHandler(s server.Server, hdlr UserBalanceServiceHandler, opts ...server.HandlerOption) error {
	type userBalanceService interface {
		GetUserBalanceInfoById(ctx context.Context, in *user_balance_log.In_GetUserBalanceInfoById, out *user_balance_log.Out_GetUserBalanceInfoById) error
		UpdateUserBalanceInfo(ctx context.Context, in *user_balance_log.In_UpdateUserBalanceInfo, out *user_balance_log.Out_UpdateUserBalanceInfo) error
		GetUserBalances(ctx context.Context, in *user_balance_log.In_GetUserBalances, out *user_balance_log.Out_GetUserBalances) error
		DeleteUserBalances(ctx context.Context, in *user_balance_log.In_DeleteUserBalances, out *user_balance_log.Out_DeleteUserBalances) error
		CreateUserBalance(ctx context.Context, in *user_balance_log.In_CreateUserBalance, out *user_balance_log.Out_CreateUserBalance) error
	}
	type UserBalanceService struct {
		userBalanceService
	}
	h := &userBalanceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserBalanceService{h}, opts...))
}

type userBalanceServiceHandler struct {
	UserBalanceServiceHandler
}

func (h *userBalanceServiceHandler) GetUserBalanceInfoById(ctx context.Context, in *user_balance_log.In_GetUserBalanceInfoById, out *user_balance_log.Out_GetUserBalanceInfoById) error {
	return h.UserBalanceServiceHandler.GetUserBalanceInfoById(ctx, in, out)
}

func (h *userBalanceServiceHandler) UpdateUserBalanceInfo(ctx context.Context, in *user_balance_log.In_UpdateUserBalanceInfo, out *user_balance_log.Out_UpdateUserBalanceInfo) error {
	return h.UserBalanceServiceHandler.UpdateUserBalanceInfo(ctx, in, out)
}

func (h *userBalanceServiceHandler) GetUserBalances(ctx context.Context, in *user_balance_log.In_GetUserBalances, out *user_balance_log.Out_GetUserBalances) error {
	return h.UserBalanceServiceHandler.GetUserBalances(ctx, in, out)
}

func (h *userBalanceServiceHandler) DeleteUserBalances(ctx context.Context, in *user_balance_log.In_DeleteUserBalances, out *user_balance_log.Out_DeleteUserBalances) error {
	return h.UserBalanceServiceHandler.DeleteUserBalances(ctx, in, out)
}

func (h *userBalanceServiceHandler) CreateUserBalance(ctx context.Context, in *user_balance_log.In_CreateUserBalance, out *user_balance_log.Out_CreateUserBalance) error {
	return h.UserBalanceServiceHandler.CreateUserBalance(ctx, in, out)
}

// Client API for UserLevel service

type UserLevelService interface {
	//获取用户等级信息
	GetUserLevelInfo(ctx context.Context, in *user_level.In_GetUserLevelInfo, opts ...client.CallOption) (*user_level.Out_GetUserLevelInfo, error)
	//修改等级信息
	UpdateUserLevel(ctx context.Context, in *user_level.In_UpdateUserLevel, opts ...client.CallOption) (*user_level.Out_UpdateUserLevel, error)
	//获取等级列表
	GetUserLevels(ctx context.Context, in *user_level.In_GetUserLevels, opts ...client.CallOption) (*user_level.Out_GetUserLevels, error)
	//删除等级列表
	DeleteUserLevels(ctx context.Context, in *user_level.In_DeleteUserLevels, opts ...client.CallOption) (*user_level.Out_DeleteUserLevels, error)
	//新建等级信息
	CreateUserLevel(ctx context.Context, in *user_level.In_CreateUserLevel, opts ...client.CallOption) (*user_level.Out_CreateUserLevel, error)
}

type userLevelService struct {
	c    client.Client
	name string
}

func NewUserLevelService(name string, c client.Client) UserLevelService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.user"
	}
	return &userLevelService{
		c:    c,
		name: name,
	}
}

func (c *userLevelService) GetUserLevelInfo(ctx context.Context, in *user_level.In_GetUserLevelInfo, opts ...client.CallOption) (*user_level.Out_GetUserLevelInfo, error) {
	req := c.c.NewRequest(c.name, "UserLevel.GetUserLevelInfo", in)
	out := new(user_level.Out_GetUserLevelInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLevelService) UpdateUserLevel(ctx context.Context, in *user_level.In_UpdateUserLevel, opts ...client.CallOption) (*user_level.Out_UpdateUserLevel, error) {
	req := c.c.NewRequest(c.name, "UserLevel.UpdateUserLevel", in)
	out := new(user_level.Out_UpdateUserLevel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLevelService) GetUserLevels(ctx context.Context, in *user_level.In_GetUserLevels, opts ...client.CallOption) (*user_level.Out_GetUserLevels, error) {
	req := c.c.NewRequest(c.name, "UserLevel.GetUserLevels", in)
	out := new(user_level.Out_GetUserLevels)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLevelService) DeleteUserLevels(ctx context.Context, in *user_level.In_DeleteUserLevels, opts ...client.CallOption) (*user_level.Out_DeleteUserLevels, error) {
	req := c.c.NewRequest(c.name, "UserLevel.DeleteUserLevels", in)
	out := new(user_level.Out_DeleteUserLevels)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLevelService) CreateUserLevel(ctx context.Context, in *user_level.In_CreateUserLevel, opts ...client.CallOption) (*user_level.Out_CreateUserLevel, error) {
	req := c.c.NewRequest(c.name, "UserLevel.CreateUserLevel", in)
	out := new(user_level.Out_CreateUserLevel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserLevel service

type UserLevelHandler interface {
	//获取用户等级信息
	GetUserLevelInfo(context.Context, *user_level.In_GetUserLevelInfo, *user_level.Out_GetUserLevelInfo) error
	//修改等级信息
	UpdateUserLevel(context.Context, *user_level.In_UpdateUserLevel, *user_level.Out_UpdateUserLevel) error
	//获取等级列表
	GetUserLevels(context.Context, *user_level.In_GetUserLevels, *user_level.Out_GetUserLevels) error
	//删除等级列表
	DeleteUserLevels(context.Context, *user_level.In_DeleteUserLevels, *user_level.Out_DeleteUserLevels) error
	//新建等级信息
	CreateUserLevel(context.Context, *user_level.In_CreateUserLevel, *user_level.Out_CreateUserLevel) error
}

func RegisterUserLevelHandler(s server.Server, hdlr UserLevelHandler, opts ...server.HandlerOption) error {
	type userLevel interface {
		GetUserLevelInfo(ctx context.Context, in *user_level.In_GetUserLevelInfo, out *user_level.Out_GetUserLevelInfo) error
		UpdateUserLevel(ctx context.Context, in *user_level.In_UpdateUserLevel, out *user_level.Out_UpdateUserLevel) error
		GetUserLevels(ctx context.Context, in *user_level.In_GetUserLevels, out *user_level.Out_GetUserLevels) error
		DeleteUserLevels(ctx context.Context, in *user_level.In_DeleteUserLevels, out *user_level.Out_DeleteUserLevels) error
		CreateUserLevel(ctx context.Context, in *user_level.In_CreateUserLevel, out *user_level.Out_CreateUserLevel) error
	}
	type UserLevel struct {
		userLevel
	}
	h := &userLevelHandler{hdlr}
	return s.Handle(s.NewHandler(&UserLevel{h}, opts...))
}

type userLevelHandler struct {
	UserLevelHandler
}

func (h *userLevelHandler) GetUserLevelInfo(ctx context.Context, in *user_level.In_GetUserLevelInfo, out *user_level.Out_GetUserLevelInfo) error {
	return h.UserLevelHandler.GetUserLevelInfo(ctx, in, out)
}

func (h *userLevelHandler) UpdateUserLevel(ctx context.Context, in *user_level.In_UpdateUserLevel, out *user_level.Out_UpdateUserLevel) error {
	return h.UserLevelHandler.UpdateUserLevel(ctx, in, out)
}

func (h *userLevelHandler) GetUserLevels(ctx context.Context, in *user_level.In_GetUserLevels, out *user_level.Out_GetUserLevels) error {
	return h.UserLevelHandler.GetUserLevels(ctx, in, out)
}

func (h *userLevelHandler) DeleteUserLevels(ctx context.Context, in *user_level.In_DeleteUserLevels, out *user_level.Out_DeleteUserLevels) error {
	return h.UserLevelHandler.DeleteUserLevels(ctx, in, out)
}

func (h *userLevelHandler) CreateUserLevel(ctx context.Context, in *user_level.In_CreateUserLevel, out *user_level.Out_CreateUserLevel) error {
	return h.UserLevelHandler.CreateUserLevel(ctx, in, out)
}

// Client API for UserLoginLogService service

type UserLoginLogService interface {
	//获取信息
	GetUserLoginLogInfoById(ctx context.Context, in *user_login_log.In_GetUserLoginLogInfoById, opts ...client.CallOption) (*user_login_log.Out_GetUserLoginLogInfoById, error)
	//修改信息
	UpdateUserLoginLogInfo(ctx context.Context, in *user_login_log.In_UpdateUserLoginLogInfo, opts ...client.CallOption) (*user_login_log.Out_UpdateUserLoginLogInfo, error)
	//获取列表
	GetUserLoginLogs(ctx context.Context, in *user_login_log.In_GetUserLoginLogs, opts ...client.CallOption) (*user_login_log.Out_GetUserLoginLogs, error)
	//删除列表
	DeleteUserLoginLogs(ctx context.Context, in *user_login_log.In_DeleteUserLoginLogs, opts ...client.CallOption) (*user_login_log.Out_DeleteUserLoginLogs, error)
	//新建信息
	CreateUserLoginLog(ctx context.Context, in *user_login_log.In_CreateUserLoginLog, opts ...client.CallOption) (*user_login_log.Out_CreateUserLoginLog, error)
}

type userLoginLogService struct {
	c    client.Client
	name string
}

func NewUserLoginLogService(name string, c client.Client) UserLoginLogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.user"
	}
	return &userLoginLogService{
		c:    c,
		name: name,
	}
}

func (c *userLoginLogService) GetUserLoginLogInfoById(ctx context.Context, in *user_login_log.In_GetUserLoginLogInfoById, opts ...client.CallOption) (*user_login_log.Out_GetUserLoginLogInfoById, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.GetUserLoginLogInfoById", in)
	out := new(user_login_log.Out_GetUserLoginLogInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) UpdateUserLoginLogInfo(ctx context.Context, in *user_login_log.In_UpdateUserLoginLogInfo, opts ...client.CallOption) (*user_login_log.Out_UpdateUserLoginLogInfo, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.UpdateUserLoginLogInfo", in)
	out := new(user_login_log.Out_UpdateUserLoginLogInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) GetUserLoginLogs(ctx context.Context, in *user_login_log.In_GetUserLoginLogs, opts ...client.CallOption) (*user_login_log.Out_GetUserLoginLogs, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.GetUserLoginLogs", in)
	out := new(user_login_log.Out_GetUserLoginLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) DeleteUserLoginLogs(ctx context.Context, in *user_login_log.In_DeleteUserLoginLogs, opts ...client.CallOption) (*user_login_log.Out_DeleteUserLoginLogs, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.DeleteUserLoginLogs", in)
	out := new(user_login_log.Out_DeleteUserLoginLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) CreateUserLoginLog(ctx context.Context, in *user_login_log.In_CreateUserLoginLog, opts ...client.CallOption) (*user_login_log.Out_CreateUserLoginLog, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.CreateUserLoginLog", in)
	out := new(user_login_log.Out_CreateUserLoginLog)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserLoginLogService service

type UserLoginLogServiceHandler interface {
	//获取信息
	GetUserLoginLogInfoById(context.Context, *user_login_log.In_GetUserLoginLogInfoById, *user_login_log.Out_GetUserLoginLogInfoById) error
	//修改信息
	UpdateUserLoginLogInfo(context.Context, *user_login_log.In_UpdateUserLoginLogInfo, *user_login_log.Out_UpdateUserLoginLogInfo) error
	//获取列表
	GetUserLoginLogs(context.Context, *user_login_log.In_GetUserLoginLogs, *user_login_log.Out_GetUserLoginLogs) error
	//删除列表
	DeleteUserLoginLogs(context.Context, *user_login_log.In_DeleteUserLoginLogs, *user_login_log.Out_DeleteUserLoginLogs) error
	//新建信息
	CreateUserLoginLog(context.Context, *user_login_log.In_CreateUserLoginLog, *user_login_log.Out_CreateUserLoginLog) error
}

func RegisterUserLoginLogServiceHandler(s server.Server, hdlr UserLoginLogServiceHandler, opts ...server.HandlerOption) error {
	type userLoginLogService interface {
		GetUserLoginLogInfoById(ctx context.Context, in *user_login_log.In_GetUserLoginLogInfoById, out *user_login_log.Out_GetUserLoginLogInfoById) error
		UpdateUserLoginLogInfo(ctx context.Context, in *user_login_log.In_UpdateUserLoginLogInfo, out *user_login_log.Out_UpdateUserLoginLogInfo) error
		GetUserLoginLogs(ctx context.Context, in *user_login_log.In_GetUserLoginLogs, out *user_login_log.Out_GetUserLoginLogs) error
		DeleteUserLoginLogs(ctx context.Context, in *user_login_log.In_DeleteUserLoginLogs, out *user_login_log.Out_DeleteUserLoginLogs) error
		CreateUserLoginLog(ctx context.Context, in *user_login_log.In_CreateUserLoginLog, out *user_login_log.Out_CreateUserLoginLog) error
	}
	type UserLoginLogService struct {
		userLoginLogService
	}
	h := &userLoginLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserLoginLogService{h}, opts...))
}

type userLoginLogServiceHandler struct {
	UserLoginLogServiceHandler
}

func (h *userLoginLogServiceHandler) GetUserLoginLogInfoById(ctx context.Context, in *user_login_log.In_GetUserLoginLogInfoById, out *user_login_log.Out_GetUserLoginLogInfoById) error {
	return h.UserLoginLogServiceHandler.GetUserLoginLogInfoById(ctx, in, out)
}

func (h *userLoginLogServiceHandler) UpdateUserLoginLogInfo(ctx context.Context, in *user_login_log.In_UpdateUserLoginLogInfo, out *user_login_log.Out_UpdateUserLoginLogInfo) error {
	return h.UserLoginLogServiceHandler.UpdateUserLoginLogInfo(ctx, in, out)
}

func (h *userLoginLogServiceHandler) GetUserLoginLogs(ctx context.Context, in *user_login_log.In_GetUserLoginLogs, out *user_login_log.Out_GetUserLoginLogs) error {
	return h.UserLoginLogServiceHandler.GetUserLoginLogs(ctx, in, out)
}

func (h *userLoginLogServiceHandler) DeleteUserLoginLogs(ctx context.Context, in *user_login_log.In_DeleteUserLoginLogs, out *user_login_log.Out_DeleteUserLoginLogs) error {
	return h.UserLoginLogServiceHandler.DeleteUserLoginLogs(ctx, in, out)
}

func (h *userLoginLogServiceHandler) CreateUserLoginLog(ctx context.Context, in *user_login_log.In_CreateUserLoginLog, out *user_login_log.Out_CreateUserLoginLog) error {
	return h.UserLoginLogServiceHandler.CreateUserLoginLog(ctx, in, out)
}

// Client API for UserPointLogService service

type UserPointLogService interface {
	//获取信息
	GetUserPointLogInfoById(ctx context.Context, in *user_point_log.In_GetUserPointLogInfoById, opts ...client.CallOption) (*user_point_log.Out_GetUserPointLogInfoById, error)
	//修改信息
	UpdateUserPointLogInfo(ctx context.Context, in *user_point_log.In_UpdateUserPointLogInfo, opts ...client.CallOption) (*user_point_log.Out_UpdateUserPointLogInfo, error)
	//获取列表
	GetUserPointLogs(ctx context.Context, in *user_point_log.In_GetUserPointLogs, opts ...client.CallOption) (*user_point_log.Out_GetUserPointLogs, error)
	//删除列表
	DeleteUserPointLogs(ctx context.Context, in *user_point_log.In_DeleteUserPointLogs, opts ...client.CallOption) (*user_point_log.Out_DeleteUserPointLogs, error)
	//新建信息
	CreateUserPointLog(ctx context.Context, in *user_point_log.In_CreateUserPointLog, opts ...client.CallOption) (*user_point_log.Out_CreateUserPointLog, error)
}

type userPointLogService struct {
	c    client.Client
	name string
}

func NewUserPointLogService(name string, c client.Client) UserPointLogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.surprise.shop.srv.user"
	}
	return &userPointLogService{
		c:    c,
		name: name,
	}
}

func (c *userPointLogService) GetUserPointLogInfoById(ctx context.Context, in *user_point_log.In_GetUserPointLogInfoById, opts ...client.CallOption) (*user_point_log.Out_GetUserPointLogInfoById, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.GetUserPointLogInfoById", in)
	out := new(user_point_log.Out_GetUserPointLogInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) UpdateUserPointLogInfo(ctx context.Context, in *user_point_log.In_UpdateUserPointLogInfo, opts ...client.CallOption) (*user_point_log.Out_UpdateUserPointLogInfo, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.UpdateUserPointLogInfo", in)
	out := new(user_point_log.Out_UpdateUserPointLogInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) GetUserPointLogs(ctx context.Context, in *user_point_log.In_GetUserPointLogs, opts ...client.CallOption) (*user_point_log.Out_GetUserPointLogs, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.GetUserPointLogs", in)
	out := new(user_point_log.Out_GetUserPointLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) DeleteUserPointLogs(ctx context.Context, in *user_point_log.In_DeleteUserPointLogs, opts ...client.CallOption) (*user_point_log.Out_DeleteUserPointLogs, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.DeleteUserPointLogs", in)
	out := new(user_point_log.Out_DeleteUserPointLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPointLogService) CreateUserPointLog(ctx context.Context, in *user_point_log.In_CreateUserPointLog, opts ...client.CallOption) (*user_point_log.Out_CreateUserPointLog, error) {
	req := c.c.NewRequest(c.name, "UserPointLogService.CreateUserPointLog", in)
	out := new(user_point_log.Out_CreateUserPointLog)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserPointLogService service

type UserPointLogServiceHandler interface {
	//获取信息
	GetUserPointLogInfoById(context.Context, *user_point_log.In_GetUserPointLogInfoById, *user_point_log.Out_GetUserPointLogInfoById) error
	//修改信息
	UpdateUserPointLogInfo(context.Context, *user_point_log.In_UpdateUserPointLogInfo, *user_point_log.Out_UpdateUserPointLogInfo) error
	//获取列表
	GetUserPointLogs(context.Context, *user_point_log.In_GetUserPointLogs, *user_point_log.Out_GetUserPointLogs) error
	//删除列表
	DeleteUserPointLogs(context.Context, *user_point_log.In_DeleteUserPointLogs, *user_point_log.Out_DeleteUserPointLogs) error
	//新建信息
	CreateUserPointLog(context.Context, *user_point_log.In_CreateUserPointLog, *user_point_log.Out_CreateUserPointLog) error
}

func RegisterUserPointLogServiceHandler(s server.Server, hdlr UserPointLogServiceHandler, opts ...server.HandlerOption) error {
	type userPointLogService interface {
		GetUserPointLogInfoById(ctx context.Context, in *user_point_log.In_GetUserPointLogInfoById, out *user_point_log.Out_GetUserPointLogInfoById) error
		UpdateUserPointLogInfo(ctx context.Context, in *user_point_log.In_UpdateUserPointLogInfo, out *user_point_log.Out_UpdateUserPointLogInfo) error
		GetUserPointLogs(ctx context.Context, in *user_point_log.In_GetUserPointLogs, out *user_point_log.Out_GetUserPointLogs) error
		DeleteUserPointLogs(ctx context.Context, in *user_point_log.In_DeleteUserPointLogs, out *user_point_log.Out_DeleteUserPointLogs) error
		CreateUserPointLog(ctx context.Context, in *user_point_log.In_CreateUserPointLog, out *user_point_log.Out_CreateUserPointLog) error
	}
	type UserPointLogService struct {
		userPointLogService
	}
	h := &userPointLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserPointLogService{h}, opts...))
}

type userPointLogServiceHandler struct {
	UserPointLogServiceHandler
}

func (h *userPointLogServiceHandler) GetUserPointLogInfoById(ctx context.Context, in *user_point_log.In_GetUserPointLogInfoById, out *user_point_log.Out_GetUserPointLogInfoById) error {
	return h.UserPointLogServiceHandler.GetUserPointLogInfoById(ctx, in, out)
}

func (h *userPointLogServiceHandler) UpdateUserPointLogInfo(ctx context.Context, in *user_point_log.In_UpdateUserPointLogInfo, out *user_point_log.Out_UpdateUserPointLogInfo) error {
	return h.UserPointLogServiceHandler.UpdateUserPointLogInfo(ctx, in, out)
}

func (h *userPointLogServiceHandler) GetUserPointLogs(ctx context.Context, in *user_point_log.In_GetUserPointLogs, out *user_point_log.Out_GetUserPointLogs) error {
	return h.UserPointLogServiceHandler.GetUserPointLogs(ctx, in, out)
}

func (h *userPointLogServiceHandler) DeleteUserPointLogs(ctx context.Context, in *user_point_log.In_DeleteUserPointLogs, out *user_point_log.Out_DeleteUserPointLogs) error {
	return h.UserPointLogServiceHandler.DeleteUserPointLogs(ctx, in, out)
}

func (h *userPointLogServiceHandler) CreateUserPointLog(ctx context.Context, in *user_point_log.In_CreateUserPointLog, out *user_point_log.Out_CreateUserPointLog) error {
	return h.UserPointLogServiceHandler.CreateUserPointLog(ctx, in, out)
}
