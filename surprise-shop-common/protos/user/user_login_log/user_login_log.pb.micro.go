// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user_login_log.proto

package user_login_log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserLoginLogService service

type UserLoginLogService interface {
	//获取信息
	GetUserLoginLogInfoById(ctx context.Context, in *In_GetUserLoginLogInfoById, opts ...client.CallOption) (*Out_GetUserLoginLogInfoById, error)
	//修改信息
	UpdateUserLoginLogInfo(ctx context.Context, in *In_UpdateUserLoginLogInfo, opts ...client.CallOption) (*Out_UpdateUserLoginLogInfo, error)
	//获取列表
	GetUserLoginLogs(ctx context.Context, in *In_GetUserLoginLogs, opts ...client.CallOption) (*Out_GetUserLoginLogs, error)
	//删除列表
	DeleteUserLoginLogs(ctx context.Context, in *In_DeleteUserLoginLogs, opts ...client.CallOption) (*Out_DeleteUserLoginLogs, error)
	//新建信息
	CreateUserLoginLog(ctx context.Context, in *In_CreateUserLoginLog, opts ...client.CallOption) (*Out_CreateUserLoginLog, error)
}

type userLoginLogService struct {
	c    client.Client
	name string
}

func NewUserLoginLogService(name string, c client.Client) UserLoginLogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user_login_log"
	}
	return &userLoginLogService{
		c:    c,
		name: name,
	}
}

func (c *userLoginLogService) GetUserLoginLogInfoById(ctx context.Context, in *In_GetUserLoginLogInfoById, opts ...client.CallOption) (*Out_GetUserLoginLogInfoById, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.GetUserLoginLogInfoById", in)
	out := new(Out_GetUserLoginLogInfoById)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) UpdateUserLoginLogInfo(ctx context.Context, in *In_UpdateUserLoginLogInfo, opts ...client.CallOption) (*Out_UpdateUserLoginLogInfo, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.UpdateUserLoginLogInfo", in)
	out := new(Out_UpdateUserLoginLogInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) GetUserLoginLogs(ctx context.Context, in *In_GetUserLoginLogs, opts ...client.CallOption) (*Out_GetUserLoginLogs, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.GetUserLoginLogs", in)
	out := new(Out_GetUserLoginLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) DeleteUserLoginLogs(ctx context.Context, in *In_DeleteUserLoginLogs, opts ...client.CallOption) (*Out_DeleteUserLoginLogs, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.DeleteUserLoginLogs", in)
	out := new(Out_DeleteUserLoginLogs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginLogService) CreateUserLoginLog(ctx context.Context, in *In_CreateUserLoginLog, opts ...client.CallOption) (*Out_CreateUserLoginLog, error) {
	req := c.c.NewRequest(c.name, "UserLoginLogService.CreateUserLoginLog", in)
	out := new(Out_CreateUserLoginLog)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserLoginLogService service

type UserLoginLogServiceHandler interface {
	//获取信息
	GetUserLoginLogInfoById(context.Context, *In_GetUserLoginLogInfoById, *Out_GetUserLoginLogInfoById) error
	//修改信息
	UpdateUserLoginLogInfo(context.Context, *In_UpdateUserLoginLogInfo, *Out_UpdateUserLoginLogInfo) error
	//获取列表
	GetUserLoginLogs(context.Context, *In_GetUserLoginLogs, *Out_GetUserLoginLogs) error
	//删除列表
	DeleteUserLoginLogs(context.Context, *In_DeleteUserLoginLogs, *Out_DeleteUserLoginLogs) error
	//新建信息
	CreateUserLoginLog(context.Context, *In_CreateUserLoginLog, *Out_CreateUserLoginLog) error
}

func RegisterUserLoginLogServiceHandler(s server.Server, hdlr UserLoginLogServiceHandler, opts ...server.HandlerOption) error {
	type userLoginLogService interface {
		GetUserLoginLogInfoById(ctx context.Context, in *In_GetUserLoginLogInfoById, out *Out_GetUserLoginLogInfoById) error
		UpdateUserLoginLogInfo(ctx context.Context, in *In_UpdateUserLoginLogInfo, out *Out_UpdateUserLoginLogInfo) error
		GetUserLoginLogs(ctx context.Context, in *In_GetUserLoginLogs, out *Out_GetUserLoginLogs) error
		DeleteUserLoginLogs(ctx context.Context, in *In_DeleteUserLoginLogs, out *Out_DeleteUserLoginLogs) error
		CreateUserLoginLog(ctx context.Context, in *In_CreateUserLoginLog, out *Out_CreateUserLoginLog) error
	}
	type UserLoginLogService struct {
		userLoginLogService
	}
	h := &userLoginLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserLoginLogService{h}, opts...))
}

type userLoginLogServiceHandler struct {
	UserLoginLogServiceHandler
}

func (h *userLoginLogServiceHandler) GetUserLoginLogInfoById(ctx context.Context, in *In_GetUserLoginLogInfoById, out *Out_GetUserLoginLogInfoById) error {
	return h.UserLoginLogServiceHandler.GetUserLoginLogInfoById(ctx, in, out)
}

func (h *userLoginLogServiceHandler) UpdateUserLoginLogInfo(ctx context.Context, in *In_UpdateUserLoginLogInfo, out *Out_UpdateUserLoginLogInfo) error {
	return h.UserLoginLogServiceHandler.UpdateUserLoginLogInfo(ctx, in, out)
}

func (h *userLoginLogServiceHandler) GetUserLoginLogs(ctx context.Context, in *In_GetUserLoginLogs, out *Out_GetUserLoginLogs) error {
	return h.UserLoginLogServiceHandler.GetUserLoginLogs(ctx, in, out)
}

func (h *userLoginLogServiceHandler) DeleteUserLoginLogs(ctx context.Context, in *In_DeleteUserLoginLogs, out *Out_DeleteUserLoginLogs) error {
	return h.UserLoginLogServiceHandler.DeleteUserLoginLogs(ctx, in, out)
}

func (h *userLoginLogServiceHandler) CreateUserLoginLog(ctx context.Context, in *In_CreateUserLoginLog, out *Out_CreateUserLoginLog) error {
	return h.UserLoginLogServiceHandler.CreateUserLoginLog(ctx, in, out)
}
