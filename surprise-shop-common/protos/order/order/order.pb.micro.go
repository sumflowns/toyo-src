// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order.proto

package order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderService service

type OrderService interface {
	//下单
	NewDirectOrder(ctx context.Context, in *In_NewDirectOrder, opts ...client.CallOption) (*Out_NewOrder, error)
	//
	//获取订单
	GetOrder(ctx context.Context, in *In_GetOrder, opts ...client.CallOption) (*Out_GetOrder, error)
	//获取订单列表
	GetOrderList(ctx context.Context, in *In_GetOrderList, opts ...client.CallOption) (*Out_GetOrderList, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "orderservice"
	}
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) NewDirectOrder(ctx context.Context, in *In_NewDirectOrder, opts ...client.CallOption) (*Out_NewOrder, error) {
	req := c.c.NewRequest(c.name, "OrderService.NewDirectOrder", in)
	out := new(Out_NewOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetOrder(ctx context.Context, in *In_GetOrder, opts ...client.CallOption) (*Out_GetOrder, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetOrder", in)
	out := new(Out_GetOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetOrderList(ctx context.Context, in *In_GetOrderList, opts ...client.CallOption) (*Out_GetOrderList, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetOrderList", in)
	out := new(Out_GetOrderList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	//下单
	NewDirectOrder(context.Context, *In_NewDirectOrder, *Out_NewOrder) error
	//
	//获取订单
	GetOrder(context.Context, *In_GetOrder, *Out_GetOrder) error
	//获取订单列表
	GetOrderList(context.Context, *In_GetOrderList, *Out_GetOrderList) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		NewDirectOrder(ctx context.Context, in *In_NewDirectOrder, out *Out_NewOrder) error
		GetOrder(ctx context.Context, in *In_GetOrder, out *Out_GetOrder) error
		GetOrderList(ctx context.Context, in *In_GetOrderList, out *Out_GetOrderList) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) NewDirectOrder(ctx context.Context, in *In_NewDirectOrder, out *Out_NewOrder) error {
	return h.OrderServiceHandler.NewDirectOrder(ctx, in, out)
}

func (h *orderServiceHandler) GetOrder(ctx context.Context, in *In_GetOrder, out *Out_GetOrder) error {
	return h.OrderServiceHandler.GetOrder(ctx, in, out)
}

func (h *orderServiceHandler) GetOrderList(ctx context.Context, in *In_GetOrderList, out *Out_GetOrderList) error {
	return h.OrderServiceHandler.GetOrderList(ctx, in, out)
}
